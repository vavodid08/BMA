var previousFocusedBeforeProcesing;
var secondFactorLoading = false;
// *** evitar problema con la consola en windows *** //
if (!window.console) console = {
    log: function() {}
};
//***********************CODIGO PARA PARAR LA PROPAGACION DEL BACKSPACE***************************************************************
function saltarBack(e) {
    tecla = (document.all) ? e.keyCode : e.which;
    if (tecla == 8) {
        if (!recorrerForm()) pararPropagacionEvento(e);
        else {
            var el = document.getElementById("elementWithFocus");
            if (el.nodeName != "INPUT") pararPropagacionEvento(e);
        }
    }
}
document.onkeydown = function() {
    if (evt != null) {
        var evt = (evt) ? evt : ((window.event) ? window.event : null);
        var node = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null);
        if ((evt.keyCode == 8) && (node.type != "text")) {
            return false;
        }
    }
};

function recorrerForm() {
    var formElement = '';
    var formObject;
    var formElementFormModal = '';
    var formObjectFormModal;
    var focoActual = $("#elementWithFocus").val();
    // si estamos en el form de algun workflow en proceso
    formObject = getDocumentMainForm();
    formObjectFormModal = getDocumentMainFormModal();
    if (formObject == null)
        // me fijo si estoy en el form del login
        formObject = document.getElementById("login_form");
    if (formObjectFormModal == null)
        // me fijo si estoy en el form del login
        formObjectFormModal = document.getElementById("login_form");
    //recorro el main_form
    if (formObject != null) {
        for (var i = 0; i < formObject.elements.length; i++) {
            formElement = formObject.elements[i];
            if (focoActual == formElement.id) return true;
        }
    }
    //recorro el main_form_modal que aplica para modales y segundo factor
    if (formObjectFormModal != null) {
        for (var i = 0; i < formObjectFormModal.elements.length; i++) {
            formElementFormModal = formObjectFormModal.elements[i];
            if (focoActual == formElementFormModal.id) return true;
        }
    }
    // es el id del componente del "irA" (acceso rapido)
    if (focoActual == "testinput") return true;
    return false;
}

function getDocumentMainForm() {
    return document.getElementById("main_form");
}

function getDocumentMainFormModal() {
    return document.getElementById("main_form_modal");
}

function updateActualFocus(elementId) {
    $("#elementWithFocus").val(elementId);
}

function pararPropagacionEvento(e) {
    // e.cancelBubble is supported by IE - this will kill the bubbling process.
    if (document.all) {
        e.keyCode = 0; // <<< esto ayuda mucho a que funcione bien en iExplorer
        e.cancelBubble = true;
        e.returnValue = false;
        e.retainFocus = true;
    }
    // e.stopPropagation works in Firefox.
    if (e.stopPropagation) {
        e.stopPropagation();
        e.preventDefault();
    }
    return false;
}
//************************CODIGO PARA PARAR LA PROPAGACION DEL BACKSPACE***************************************************
var stIsIE = /* @cc_on!@ */ false;

function compare(a, b) {
    au = new String(a);
    bu = new String(b);
    var an = null;
    var bn = null;
    if (au.charAt(4) != '-' && au.charAt(7) != '-') {
        an = parseFloat(au);
        bn = parseFloat(bu);
    }
    if (isNaN(an) || isNaN(bn)) {
        as = au.toLowerCase();
        bs = bu.toLowerCase();
        if (as > bs) {
            return 1;
        } else {
            return -1;
        }
    } else {
        return an - bn;
    }
}

function saveAndSetFocus(container) {
    previousFocusedBeforeProcesing = document.activeElement;
    $("#" + container).focus();
}

function getConcatenedTextContent(node) {
    var _result = "";
    if (node == null) {
        return _result;
    }
    var childrens = node.childNodes;
    var i = 0;
    while (i < childrens.length) {
        var child = childrens.item(i);
        switch (child.nodeType) {
            case 1: // ELEMENT_NODE
            case 5: // ENTITY_REFERENCE_NODE
                _result += getConcatenedTextContent(child);
                break;
            case 3: // TEXT_NODE
            case 2: // ATTRIBUTE_NODE
            case 4: // CDATA_SECTION_NODE
                _result += child.nodeValue;
                break;
            case 6: // ENTITY_NODE
            case 7: // PROCESSING_INSTRUCTION_NODE
            case 8: // COMMENT_NODE
            case 9: // DOCUMENT_NODE
            case 10: // DOCUMENT_TYPE_NODE
            case 11: // DOCUMENT_FRAGMENT_NODE
            case 12: // NOTATION_NODE
                // skip
                break;
        }
        i++;
    }
    return _result;
}
var persistclose = 0; //set to 0 or 1. 1 means once the bar is manually closed, it will remain closed for browser session
var startX = 30; // set x offset of bar in pixels
var startY = 10; // set y offset of bar in pixels
var verticalpos = "fromtop"; // enter "fromtop" or "frombottom"
var helpWindow = null;
var lastSubmenu = null;
var lastMenuPathForDebugInfo = "";

function iecompattest() {
    return (document.compatMode && document.compatMode != "BackCompat") ? document.documentElement : document.body;
}

function get_cookie(Name) {
    var search = Name + "=";
    var returnvalue = "";
    if (document.cookie.length > 0) {
        offset = document.cookie.indexOf(search);
        if (offset != -1) {
            offset += search.length;
            end = document.cookie.indexOf(";", offset);
            if (end == -1) end = document.cookie.length;
            returnvalue = unescape(document.cookie.substring(offset, end));
        }
    }
    return returnvalue;
}

function closebar() {
    if (persistclose) document.cookie = "remainclosed=1";
    document.getElementById("topbar").style.visibility = "hidden";
}

function checkInt(event) {
    if (event.keyCode <= 57 || (event.keyCode >= 96 && event.keyCode <= 105) || event.keyCode == 109) return true;
    // hack for IE6, that doesn't recognize event.preventDefault()
    if (event.preventDefault != undefined) {
        event.preventDefault();
    } else {
        event.returnValue = false;
    }
}

function getHTTPObject() {
    var xmlhttp;
    /*@cc_on
	@if (@_jscript_version >= 5)
	  try {
	    xmlhttp = new ActiveXObject('Msxml2.XMLHTTP');
	  } catch (e) {
	    try {
	      xmlhttp = new ActiveXObject('Microsoft.XMLHTTP');
	    } catch (E) {
	      xmlhttp = false;
	    }
	  }
	@else
	xmlhttp = false;
	@end @*/
    if (!xmlhttp && typeof XMLHttpRequest != 'undefined') {
        try {
            xmlhttp = new XMLHttpRequest();
        } catch (e) {
            xmlhttp = false;
        }
    }
    return xmlhttp;
}
var http = getHTTPObject();
var isIE = getNavigator();
var isCHROME = getNavigator();
// se usa para el breadcrumb
lastSubmenuName = null;
var tableHelpShown = false;
var hintTrue = false;

function inicializaMenuVertical() {
    // dado que ie no soporta hover por css, se lo agrega por js
    if (stIsIE) {
        $("#navmenu-h li,#navmenu-v li").hover(function() {
            $(this).addClass("iehover");
        }, function() {
            $(this).removeClass("iehover");
        });
    }
}

function expirationDaysMessage(expirationDays) {
    showError("Su contraseña expirará en " + expirationDays + " días");
}

function getNavigator() {
    var myNav = navigator.userAgent.toLowerCase();
    return (myNav.indexOf('msie') != -1) ? parseInt(myNav.split('msie')[1]) : false;
}

function handleHttpEncryptResponse(sResponseXML) {
    var fResponseXML;
    if (window.DOMParser) {
        fResponseXML = function(sResponseXML) {
            return (new window.DOMParser()).parseFromString(sResponseXML, "text/xml");
        };
    } else if (typeof window.ActiveXObject != "undefined" && new window.ActiveXObject("Microsoft.XMLDOM")) {
        fResponseXML = function(sResponseXML) {
            var xmlDoc = new window.ActiveXObject("Microsoft.XMLDOM");
            xmlDoc.async = "false";
            xmlDoc.loadXML(sResponseXML);
            return xmlDoc;
        };
    } else {
        fResponseXML = function() {
            return null;
        }
    }
    var responseXML = fResponseXML(sResponseXML);
    var fieldID = responseXML.documentElement.getElementsByTagName('fieldID')[0].childNodes[0].nodeValue;
    var options = responseXML.documentElement.getElementsByTagName('option');
    var optionPairs = new Array();
    for (var i = 0; i < options.length; i++) {
        var key = options[i].getElementsByTagName('key')[0];
        var value = options[i].getElementsByTagName('value')[0];
        if (value.childNodes.length > 0) {
            optionPairs[key.childNodes[0].nodeValue] = value.childNodes[0].nodeValue;
        } else {
            optionPairs[key.childNodes[0].nodeValue] = " ";
        }
    }
    if (isIE && isIE < 8) {
        fillSelectIE(fieldID, optionPairs);
    } else {
        fillSelectField(fieldID, optionPairs);
    }
    if ($(document.activeElement).attr("id") == fieldID) {
        $('#' + fieldID).blur();
        $('#' + fieldID).focus();
    }
}

function handleHttpResponse(responseXML) {
    var fieldID = responseXML.documentElement.getElementsByTagName('fieldID')[0].childNodes[0].nodeValue;
    var options = responseXML.documentElement.getElementsByTagName('option');
    var optionPairs = new Array();
    for (var i = 0; i < options.length; i++) {
        var key = options[i].getElementsByTagName('key')[0];
        var value = options[i].getElementsByTagName('value')[0];
        if (value.childNodes.length > 0) {
            optionPairs[key.childNodes[0].nodeValue] = value.childNodes[0].nodeValue;
        } else {
            optionPairs[key.childNodes[0].nodeValue] = " ";
        }
    }
    if (isIE && isIE < 8) {
        fillSelectIE(fieldID, optionPairs);
    } else {
        fillSelectField(fieldID, optionPairs);
    }
}

function fillSelectIE(fieldID, optionsPairs) {
    var selectObject = document.getElementById(fieldID);
    while (selectObject.hasChildNodes()) selectObject.removeChild(selectObject.firstChild);
    var nuleable = isNulleable(selectObject);
    for (var key in optionsPairs) {
        var opt = document.createElement('option');
        opt.innerHTML = optionsPairs[key];
        opt.value = key;
        if (nuleable && key == 'Ninguno') opt.selected = true;
        selectObject.appendChild(opt);
    }
}
// ***********************************************************
function ocultarLista(e) {
    if (document.getElementById("dropdowndiv") != null)
        if (document.getElementById("dropdowndiv").style.display != "none") {
            var IE = document.all ? true : false;
            if (!IE) document.captureEvents(Event.MOUSEMOVE);
            // document.onmousemove = getMouseXY;
            var tempX = 0;
            var tempY = 0;
            if (IE) { // grab the x-y pos.s if browser is IE
                tempX = event.clientX + document.body.scrollLeft;
                tempY = event.clientY + document.body.scrollTop;
            } else { // grab the x-y pos.s if browser is NS
                tempX = e.pageX;
                tempY = e.pageY;
            }
            if (tempX < 0) {
                tempX = 0;
            }
            if (tempY < 0) {
                tempY = 0;
            }
            // me fijo si el click cayo sobre el div
            arriba = document.getElementById("dropdowndiv").offsetTop;
            izquierda = document.getElementById("dropdowndiv").offsetLeft;
            ancho = document.getElementById("dropdowndiv").offsetWidth;
            alto = document.getElementById("dropdowndiv").offsetHeight;
            if (((tempX < izquierda) || (tempX > izquierda + ancho + 5)) || ((tempY < arriba - 50) || (tempY > arriba + alto))) ocultaOpciones(); //document.getElementById("dropdowndiv").style.display = 'none';
        }
    if (tableHelpShown && !hintTrue) {
        var tempX = 0;
        var tempY = 0;
        if (isIE) { // grab the x-y pos.s if browser is IE
            tempX = event.clientX + document.body.scrollLeft;
            tempY = event.clientY + document.body.scrollTop;
        } else { // grab the x-y pos.s if browser is NS
            tempX = e.pageX;
            tempY = e.pageY;
        }
        if (tempX < 0) {
            tempX = 0;
        }
        if (tempY < 0) {
            tempY = 0;
        }
        // me fijo si el click cayo sobre el div
        arriba = document.getElementById("t1").offsetTop;
        izquierda = document.getElementById("t1").offsetLeft;
        ancho = document.getElementById("t1").offsetWidth;
        alto = document.getElementById("t1").offsetHeight;
        if (((tempX < izquierda) || (tempX > izquierda + ancho)) || ((tempY < arriba) || (tempY > arriba + alto))) closeHelp();
        tableHelpShown = false;
    }
    hintTrue = false;
}
var typedstring = "";
// vector auxiliar donde guarda las coincidencias
var aux = new Array();

function autofill(y, evt) {
    document.getElementById("dropdowndiv").style.display = "none";
    // toma el tamaño de la entrada
    var len = document.getElementById("testinput").value.length;
    // Si presiona para arriba o para abajo
    if (evt.keyCode == 40 || evt.keyCode == 38) updownkeypress(evt, aux);
    // Si presiona un alfanumerico
    if ((evt.keyCode == 8) || (evt.keyCode >= 48 && evt.keyCode <= 57) || (evt.keyCode >= 65 && evt.keyCode <= 90) || (evt.keyCode >= 97 && evt.keyCode <= 122)) {
        aux = new Array();
        for (var i = 0; i <= codes.length - 1; i++) {
            if (codes[i].substring(0, len) == y || codes[i].substring(0, len) == y.toUpperCase()) {
                aux.push(codes[i]);
            } else {
                document.getElementById("testinput").value = y;
            }
        }
    }
    if (aux.length > 1) {
        builddropdown(aux);
    }
}

function validarCodigo(valor) {
    var encontro = false;
    if (valor != "") {
        for (var i = 0; i <= codes.length - 1; i++) {
            if (codes[i] == valor) encontro = true;
        }
        if (encontro == false) {
            showError("Código invalido.");
            document.getElementById("testinput").value = "";
        }
    } else {
        showError("No se ingresó ningun código.");
    }
    return encontro;
}
var ejecutoEnterEnIrA = 0;

function mandarForm(event) {
    if (event.keyCode == 13) {
        ejecutoEnterEnIrA = 1;
        document.getElementById("dropdowndiv").style.display = "none";
        submitGoButton();
        return true;
        /*
		    event.returnValue = false;
	        event.cancel = true;
			document.getElementById("botonIrA").click();
			return true;
		 */
    }
}

function updownkeypress(evnt, vec) {
    for (var i = 0; i <= vec.length - 1; i++) {
        if (document.getElementById("testinput").value == vec[i].substring(0, document.getElementById("testinput").value.length)) {
            if (evnt.keyCode == 40) {
                if (vec[i + 1]) {
                    document.getElementById("testinput").value = vec[i + 1];
                    return;
                }
            }
            if (evnt.keyCode == 38) {
                if (vec[i - 1]) {
                    document.getElementById("testinput").value = vec[i - 1];
                    return;
                }
            }
        }
    }
}

function ocultaOpciones() {
    var ta = document.getElementById("dropdowndiv");
    ta.style.display = 'none';
}

function mostraOpciones() {
    var ta = document.getElementById("dropdowndiv");
    ta.style.display = '';
}

function setearTextoBarraEstado(txt) {
    window.status = txt;
    // setTimeout("borra()",500);
}

function borrarTextoBarraEstado() {
    window.status = "";
}

function builddropdown(selectbox) {
    if (document.getElementById("dropdowndiv").style.display == "none") {
        document.getElementById("testinput").focus();
        document.getElementById("dropdowndiv").innerHTML = "";
        document.getElementById("dropdowndiv").style.display = "";
        var elemento = "<dl>";
        for (var i = 0; i <= selectbox.length - 1; i++) {
            elemento += "<dt id=" + i + " onclick=sendval(this.id) onmouseover=setcursor(this) >" + selectbox[i] + "</dt>";
            //si el tamaño del codigo sobrepasa el tamaño del dropdowndiv agrega la barrita horizontal
            //16 caracteres es aprox 100px que es el tamaño inicial del dropdowndiv
            if (selectbox[i].length > 16) document.getElementById("dropdowndiv").style.overflowX = "scroll";
        }
        elemento += "</dl>";
        document.getElementById("dropdowndiv").innerHTML = elemento;
    } else {
        document.getElementById("dropdowndiv").style.display = "none";
    }
}

function sendval(i) {
    document.getElementById(i).style.backgroundColor = "69adf1";
    var sendval1 = i;
    document.getElementById("dropdowndiv").style.display = "none";
    document.getElementById("testinput").value = codes[sendval1];
    document.getElementById("botonIrA").focus();
}

function setcursor(ob) {
    // var elem=document.getElementById("dropdowndiv");
    for (var i = 0; i <= codes.length - 1; i++) {
        ob.style.cursor = "default";
        // elem.getElementById(i).style.backgroundColor="69adf1";
    }
}
// **************************************************************
function fillSelectField(fieldID, optionPairs) {
    var selectObject = document.getElementById(fieldID);
    selectObject.length = 0;
    var i = 0;
    var nulleable = isNulleable(selectObject);
    if (nulleable) {
        i = 1;
    }
    for (var key in optionPairs) {
        if (nulleable && key == 'Ninguno') {
            selectObject.options[0] = new Option(optionPairs[key], key);
            selectObject.selectedIndex = 0;
        } else {
            selectObject.options[i] = new Option(optionPairs[key], key);
        }
        i++;
    }
}

function isNulleable(selectObject) {
    var nuleable = selectObject.getAttribute("nulleable");
    if (nuleable != null && (nuleable == true || nuleable == 'true')) return true;
    return false;
}

function makePOSTRequest(url, parameters, selectID, isAsync) {
    var dataToSend = "";
    if (CyberBank.encryption.enable) {
        var p_temp = getRandomPassword();
        parameters = JSON.stringify(createSecureRequest(parameters, p_temp));
        dataToSend = {
            parameters: parameters
        }
    } else {
        dataToSend = parameters;
    }
    $.ajaxInvoker({
        type: 'POST',
        url: url,
        data: dataToSend,
        headers: {
            'Content-type': 'application/x-www-form-urlencoded',
            'X-Cache-ID': selectID,
            'Actualize-Field': 'false'
        },
        async: (isAsync == undefined ? true : isAsync)
    }).done(function(data, textStatus, resp) {
        var respText = data;
        if (CyberBank.encryption.enable) {
            respText = resolveSecureResponse(data, p_temp);
            handleHttpEncryptResponse(respText);
        } else {
            handleHttpResponse(respText);
        }
    }).always(function() {
        anularTimeout(timerId);
        $.hideprogress();
    });
}
/*

function makePostDepend(url, parameters, selectID) {

	http.open('POST', url, false);
	http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
	// http.setRequestHeader('User-Agent', 'AJAX');
	http.setRequestHeader('X-Cache-ID', selectID);
	http.setRequestHeader('Actualize-Field', 'true');
	http.send(parameters);
}
*/
function encodeCollection(collectionID) {
    try {
        var collectionData = eval(collectionID + '_data');
    } catch (e) {
        var collection = document.getElementById(collectionID);
        var nameLastIndex = collection.previousSibling.text.indexOf("=");
        var collectionName = collection.previousSibling.text.substring(4, nameLastIndex);
        eval(collection.previousSibling.text);
        collectionData = eval(collectionName);
    }
    var encodedCollection = "";
    var encodedCollectionSize = 0;
    for (var elementIndex in collectionData) {
        var collectionElement = collectionData[elementIndex];
        if (collectionElement[1] == 'true') {
            if (encodedCollectionSize > 0) encodedCollection = encodedCollection + ';';
            encodedCollectionSize++;
            encodedCollection = encodedCollection + collectionElement[0];
        }
    }
    return encodedCollection;
}

function encodeHiddenElemOfForm(formID) {
    var str = '';
    var formObject;
    if (formID.nodeName == 'FORM') formObject = formID;
    else formObject = document.getElementById(formID);
    var hidden = $(formObject).find(":hidden").not("script");
    for (var i = 0; i < hidden.length; i++) {
        formElement = hidden[i];
        formElementValue = formElement.value;
        formElementName = formElement.name;
        if ((formElementName != "") && (formElementName !== undefined)) {
            str += formElementName + '=' + encodeURIParams(formElementValue) + '&';
        }
    }
    var glbDate = getDateForGlb();
    str += 'glb_date' + '=' + encodeURIParams(glbDate) + '&';
    str = str.substr(0, (str.length - 1));
    return str;
}

function encodeSecondFactor(parameters) {
    if (document.getElementById('main_form_modal') != null) {
        var secondFactorParameters = encodeForm(document.getElementById('main_form_modal')).split('&IDContexto');
        return secondFactorParameters[0];
    }
}

function documentActiveElement() {
    var elem = document.activeElement;
    if (elem.id == "cyberbankBody") {
        if (navigator.userAgent.toLowerCase().indexOf('safari/') > -1) {
            if (actionID != undefined) {
                elem = $('#' + actionID);
            }
        }
    }
    return elem;
}

function encodeForm(formID) {
    var str = '';
    var formElementValue = '';
    var formElementName = '';
    var formElement = '';
    var formObject;
    if (formID.nodeName == 'FORM') formObject = formID;
    else formObject = document.getElementById(formID);
    for (var i = 0; i < formObject.elements.length; i++) {
        try {
            formElement = formObject.elements[i];
            formElementValue = formElement.value;
            formElementName = formElement.name;
            formElementId = formElement.id;
            formElementName = formElement.name != "" ? formElement.name : formElementId;
            if ((formElementId != "" || formElementName != '') && !disabledElement(formElement) || isDisabledCombo(formElement)) {
                switch (formElement.type) {
                    case 'password':
                        var hasToHash = $("#" + formElementId).attr('hasToHash');
                        var addPass = '_PASSWORD_';
                        if (hasToHash == 'false') {
                            addPass = '';
                        }
                        str += addPass + formElementId + '=' + encodeURIParams(formElementValue) + '&';
                        break;
                    case 'text':
                        var valueDate = "";
                        if (formElement.className.indexOf("date-field_") != -1 && (formElementValue != null && formElementValue != "")) {
                            str += formElementId + '=' + encodeURIComponent(encodeDate(formElementValue)) + '&';
                        } else // ////select-field-dinamico
                        if (formElementName.match("^SelectFieldDinamic") && (formElementValue != null && formElementValue != "")) {
                            var valor = formElementName.substring(formElementName.indexOf("--", 0) + 2, formElementName.length);
                            formElementName = formElementName.substring(0, formElementName.indexOf("--", 0));
                            str += formElementId + '=' + encodeURIComponent(encodeURIParams(valor)) + '&';
                        }
                        else {
                            formElementValue = $("#" + formElementId).attr('datatype') == 'float' ? $("#" + formElementId).attr('unmasked') : formElementValue;
                            str += formElementId + '=' + encodeURIParams(formElementValue) + '&';
                        }
                        /* para el captcha */
                        if (formElementName == 'captchafield') {
                            str += 'captchaValido=true' + '&';
                            str += 'captchafield=' + encodeURIParams(formElementValue) + '&';
                            if ((document.getElementById(actionID)) && (document.getElementById(actionID).getAttribute('validationEnable')) && (document.getElementById(actionID).getAttribute('validationEnable') == 'true')) {
                                str += 'captchaValidationEnable=true' + '&';
                            }
                        }
                        break;
                    case 'hidden':
                        if (formElementName == 'execute' && document.getElementById('execute').value != null && document.getElementById('execute').value != '') {
                            str += formElementName + '=' + encodeURIParams(document.getElementById('execute').value) + '&';
                            //valido si esta en safari
                            if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
                                var hiddenSectionRep = $(documentActiveElement()).closest("div[blockContainer='div_section_rep_container']");
                            } else {
                                var hiddenSectionRep = $(previousFocusedBeforeProcesing).closest("div[blockContainer='div_section_rep_container']");
                            }
                            // valido si esta en una sección repetible
                            if (hiddenSectionRep.length) {
                                var hidden_input = hiddenSectionRep.children("[name='hidden_section_rep']");
                                str += hidden_input.attr('id') + '=' + encodeURIParams(hidden_input.val()) + '&';
                            }
                            break;
                        } else {
                            if (formElementValue != null && formElementValue.length > 0) {
                                str += formElementName + '=' + encodeURIParams(formElementValue) + '&';
                                //							str += formElementId + '=' + encodeURIParams(formElementValue)+ '&';
                            }
                            break;
                        }
                    case 'textarea':
                        str += formElementId + '=' + encodeURIParams(formElementValue) + '&';
                        break;
                    case 'select-one': // es el select-field
                        var selIndex = formElement.selectedIndex;
                        if (selIndex > -1) formElementValue = formElement.options[selIndex].value;
                        str += formElementId + '=' + encodeURIParams(formElementValue) + '&';
                        break;
                    case 'select-multiple':
                        // es una DobleListSlector
                        if (formElementName.charAt(0) == 'D') {
                            for (var ii = 0; ii < formElement.options.length; ii++) {
                                var opt = formElement.options[ii];
                                str += formElementId + '=' + encodeURIParams(opt.value) + '&';
                            }
                        } else
                            // es una ListMultiple
                            for (var ii = 0; ii < formElement.options.length; ii++) {
                                var opt = formElement.options[ii];
                                if (opt.selected == true) {
                                    str += formElementId + '=' + encodeURIParams(opt.value) + '&';
                                }
                            }
                        break;
                    case 'checkbox':
                        // si es un componente check-box
                        if (formElementName.match("^bool_field_")) {
                            str += formElementId + '=' + encodeURIParams(formElement.checked) + '&';
                            break;
                        } else { // deberia ser para las colecciones
                            if (formElement.checked) {
                                str += formElementName + '=' + encodeURIParams(formElementValue) + '&';
                            } else {
                                str += formElementName + '=' + encodeURIParams(-1) + '&';
                            }
                        }
                        break;
                    case 'radio':
                        // se agrego para que la funcionalidad de la lupa no use el
                        // radiobutton para
                        // definir el elemento a inspeccionar
                        if (selectedRowIDForEventAction != null && formElementName.indexOf(actionID.substring(0, actionID.indexOf('_'))) > -1) {
                            break;
                        }
                        if ((formElementName == 'radiobuttonField') || (formElementName == formElementId.substring(0, formElementId.lastIndexOf('_opt_')))) { // VIEW-1255
                            if (formElement.checked) {
                                //var id = formElementId.substring(0, formElementId.lastIndexOf('_opt_'));
                                str += formElementId + '=' + encodeURIParams(formElementValue) + '&';
                            }
                        } else { // deberia ser para las colecciones
                            if (formElement.checked) {
                                str += formElementName + '=' + encodeURIParams(formElementValue) + '&';
                            } else {
                                str += formElementName + '=' + encodeURIParams(-1) + '&';
                            }
                        }
                        break;
                }
            }
        } catch (error) {
            $.hideprogress();
            console.error(error);
            CyberBank.utils.logError(error);
            window.location.reload();
        }
    }
    var glbDate = getDateForGlb();
    str += 'glb_date' + '=' + encodeURIParams(glbDate) + '&';
    var dLSelectorComp = document.getElementsByClassName("doble-list-selector");
    if (dLSelectorComp != null)
        for (var ij = 0; ij < dLSelectorComp.length; ij++) str += 'hasDobleListSelector=' + encodeURIParams(dLSelectorComp[ij].id) + '&';
    if (selectedRowIDForEventAction != null) {
        str += 'selectedRowIDForEventAction' + '=' + encodeURIParams(selectedRowIDForEventAction) + '&';
        selectedRowIDForEventAction = null;
    }
    str = str.substr(0, (str.length - 1));
    // Se agrega el parametro tab cuando hay segundo factor
    if (document.getElementById('solapa-second-factor') != null) {
        if (str.indexOf("tab=") == -1) {
            str = str + "&tab=" + document.getElementById('tab').value;
        }
    }
    return str;
}

function encodeFormSelectField() {
    var str = '';
    var formElementValue = '';
    var formElementName = '';
    var formElement = '';
    var formObject;
    formObject = getDocumentForm();
    for (var i = 0; i < formObject.elements.length; i++) {
        formElement = formObject.elements[i];
        formElementValue = formElement.value;
        formElementName = formElement.name;
        formElementId = formElement.id;
        if (formElementId != "" && !disabledElement(formElement) || isDisabledCombo(formElement)) {
            switch (formElement.type) {
                case 'select-one':
                    var selIndex = formElement.selectedIndex;
                    if (selIndex > -1) formElementValue = formElement.options[selIndex].value;
                    str += formElementId + '=' + encodeURIParams(formElementValue) + '&';
                    break;
            }
        }
    }
    str = str.substr(0, (str.length - 1));
    return str;
}
/** Esta funcion es habilita el envio de datos de un combo desabilitado */
function isDisabledCombo(formElement) {
    return function() {
        if (formElement.name != "" && formElement.className == 'select-field_NO_EDITABLE') {
            return true;
        } else {
            return false;
        }
    }();
}

function disabledElement(formElement) {
    if (isIE && isIE < 8) {
        if (formElement.outerHTML != null) {
            if (formElement.outerHTML.indexOf('disabled') != -1 || $("#" + formElement.id).attr('readonly') !== undefined) {
                return true;
            }
        }
        return false;
    }
    if (formElement.attributes != null) {
        if (formElement.attributes.disabled != null || formElement.attributes.readOnly != null) {
            return true;
        }
    }
    return false;
}

function encodeDate(dateElement) {
    var result = "";
    var core_date = "yyyyMMddHHmmss";
    var date_array = dateElement.split("/");
    // for ( var i = 0; i < date_array.length; i++){
    for (var i = date_array.length - 1; i >= 0; i--) {
        result += date_array[i];
    }
    var datelength = result.length;
    for (var j = datelength; j < core_date.length; j++) {
        result += "0";
    }
    return result;
}

function updateDependentFields(dependentFields) {
    window.status = traducir("Ejecutando...");
    if (procesando == false) {
        setProcesando(true);
        timerId = window.setTimeout('setProcesando(false)', 7000);
    }
    var parameters = encodeForm(getDocumentIDForm());
    for (var i = 0; i < dependentFields.length; i++) makePOSTRequest('index', parameters, dependentFields[i]);
    /*  if ( !isIE){
	for(var i = 0; i < dependentFields.length; i++)
		document.getElementById(dependentFields[i]).onChange();


    }
	 */
    // anularTimeout(timerId);
}

function clearField(fieldToClear) {
    for (var i = 0; i < fieldToClear.length; i++) {
        var element = $('#' + fieldToClear[i]);
        if (element.length) {
            if (!isIE && element[0].options != null) {
                element[0].options.length = 0;
            }
            element.selectedIndex = -1;
        }
    }
}

function showSubMenu(menuID) {
    if (menuID != null) {
        closeCalendars();
        lastSubmenu = menuID;
        hideContainer();
        collapseAllMenus();
        var menuObject = document.getElementById(menuID);
        menuObject.style.display = '';
    }
}

function collapseAllMenus() {
    hideContainer();
    var menuContainerObject = document.getElementById('main_workarea');
    if (menuContainerObject != null)
        for (var i = 0; i < menuContainerObject.childNodes.length; i++) {
            element = menuContainerObject.childNodes[i];
            if (element.className == 'submenucontainer') element.style.display = 'none';
        }
}

function hideContainer() {
    var containerObject = document.getElementById('container');
    containerObject.style.display = 'none';
}
/**
 * Quita los caracteres en blanco a izquierda y derecha
 */
function cleanValueSpaces(value) {
    if (typeof value.replace == 'function') {
        return value.replace(/^\s+/, '').replace(/\s+$/, '');
    } else {
        return value;
    }
}

function retrieveFormElement(formObject, i) {
    if (formObject.elementWrapper == true) {
        return formObject.elements[i].get(0); //Gets the plain object inside the jQuery obj.
    }
    return formObject.elements[i];
}

function validateWithTabs(idComponent) {
    return (($('#tab').length > 0 && $('#tab').val() != "" && $('#solapa-' + $('#tab').val()).find(idComponent).length > 0) || (($('#tab').length == 0 || $('#tab').val() == "") && ($('.container-tab-component').find(idComponent).length == 0)))
}

function validateSecondFactor() {
    if (document.getElementById('second-factor') != null && document.getElementById('main_form_modal') != null) {
        return validateForm(document.getElementById('main_form_modal'));
    } else {
        return true;
    }
}

function validateForm(formObject) {
    var errorMessage = '';
    var validationRadio = 'false';
    var validarRadio = 'false';
    $('.error').removeClass('error');
    var isValid = true;
    // valida los radioButtonFields obligatorios
    // var radioGroups = document.getElementsByName('radioButtonContainer');
    var radioGroups = formObject.id != 'main_form' && formObject.id != 'main_form_modal' ? $.grep($(formObject.elements), function(e) {
        return $(e).attr('name') == "radioButtonContainer"
    }) : $('[name="radioButtonContainer"]');
    for (var u = 0; u < radioGroups.length; u++) {
        var radioGroup = radioGroups[u];
        if (!($(radioGroup).is(":hidden")) && $(radioGroup).attr('required') == 'required') {
            var radios = $(radioGroup).find('input');
            var ok = false;
            for (var i = 0; i < radios.length; i++) {
                ok = ok || $(radios[i]).is(':radio') && $(radios[i]).is(':checked');
            }
            if (!ok) {
                isValid = false;
                var contenedor = radioGroup;
                if ($(contenedor).attr('validationMessage') != null) {
                    errorMessage = setErrorMessage(errorMessage, radioGroup[0] == null ? radioGroup : radioGroup[0], $(contenedor).attr('validationMessage') + "\n");
                } else {
                    errorMessage = setErrorMessage(errorMessage, radioGroup[0] == null ? radioGroup : radioGroup[0], traducir("Debe seleccionar una opcion de ") + $(radioGroup).attr('caption') + "\n");
                }
            }
        }
    }
    for (var i = 0; i < formObject.elements.length; i++) {
        var formElementValue = '';
        formElement = retrieveFormElement(formObject, i);
        if ($(formElement).is(":hidden")) { // No se deben validar elementos que no son visibles
            continue;
        }
        if (validateWithTabs("#" + formElement.getAttribute('id'))) {
            switch (formElement.type) {
                case 'text':
                case 'hidden':
                case 'password':
                case 'radio':
                case 'checkbox':
                case 'textarea':
                    formElementValue = formElement.value;
                    var notApplyTrim = $(formElement).attr("notTrimString");
                    //saco espacios en blanco a izquierda y derecha si no es password
                    if (formElement.type != 'password' && notApplyTrim != "true") {
                        formElementValue = cleanValueSpaces(formElementValue);
                        // reemplazo el valor por el valor correcto
                        formElement.value = formElementValue;
                    }
                    break;
                case 'select-one':
                    var selIndex = formElement.selectedIndex;
                    if (selIndex > -1) formElementValue = formElement.options[selIndex].value;
                    break;
                default:
                    continue;
            }
            // validar que no exeda el rango permitido para el tipo de dato int
            if (formElement.type == 'text' && isIntField(formElement.id)) {
                formElementValue = formElement.value;
                if ((formElementValue > 2147483647) || (formElementValue < -2147483648)) {
                    isValid = false;
                    errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + ' ' + traducir("sobrepasa el maximo permitido para el tipo de dato.") + ' ' + '\n');
                }
            }
            var isBlank;
            if (formElement.type == 'select-one') {
                isBlank = (formElementValue == 'Ninguno' || formElementValue == '');
            } else {
                isBlank = formElementValue == '';
            }
            var validateRequired = formElement.hasAttribute('required') && $(formElement).closest(".hiddenSection").length == 0 && isBlank;
            // es un campo extra de un radio button
            if (validateRequired && !(formElement.id === 'undefined') && formElement.id.indexOf('extraField_') >= 0) {
                var dependantElement = document.getElementById(formElement.getAttribute('dependant'));
                validateRequired = validateRequired && dependantElement.checked;
            }
            if (validateRequired) {
                isValid = false;
                if (formElement.hasAttribute('validationMessage')) {
                    errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('validationMessage') + "\n");
                } else {
                    errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + ' ' + traducir("es obligatorio") + "\n");
                }
                document.getElementById(formElement.id).focus();
            }
            if ((formElement.readOnly == undefined) || (!isBlank && formElement.readOnly != true)) {
                if (formElement.getAttribute('name') != null) {
                    if (formElement.getAttribute('name').indexOf('TIME_HR') != -1) {
                        CyberBank.validator.addTimeComponent(formElement.getAttribute('idgroup'), formElement.getAttribute('caption'), formElementValue);
                        if ((!isNaN(formElementValue)) && (Number(formElementValue) > 23 || Number(formElementValue) < 0)) {
                            isValid = false;
                            errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + ' ' + traducir("Hora invalida") + "\n");
                            document.getElementById(formElement.id).focus();
                        } else {
                            error = validateTimeConstrain(formElement, 'TIME_HR');
                            if (error != '') {
                                isValid = false;
                                errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + error + "\n");
                                document.getElementById(formElement.id).focus();
                            }
                        }
                    }
                    if (formElement.getAttribute('name').indexOf('TIME_MIN') != -1) {
                        CyberBank.validator.addTimeComponent(formElement.getAttribute('idgroup'), formElement.getAttribute('caption'), formElementValue);
                        if ((!isNaN(formElementValue)) && (Number(formElementValue) > 59 || Number(formElementValue) < 0)) {
                            isValid = false;
                            errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + " Minutos inválidos" + "\n");
                            document.getElementById(formElement.id).focus();
                        }
                        /*                   else {
                    	error = validateTimeConstrain(formElement,'TIME_MIN');
                    	if (error.lenght>0){
                    		isValid = false;
					    	errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + error + "\n";
    						document.getElementById(formElement.id).focus();
 						}
                    }
 */
                    }
                }
                // Fix track 24533
                if (isFloatField(formElement.id)) {
                    var unmasked = formElement.getAttribute('unmasked');
                    formElementValue = unmasked.replace(/\./g, ',');
                }
                if (isNumeric(formElement.id)) {
                    // -- Remueve el formato de automascarar para validacion.
                    formElementValue = CB.automask.getUnformattedNumberForValidation(formElementValue);
                }
                if (formElement.getAttribute('rangemin') != null) {
                    var rangeMinString = formElement.getAttribute('rangemin');
                    var rangeMin = Number(rangeMinString);
                    //--Si ambos valores son numericos se compara a nivel numerico
                    if (!isNaN(formElementValue) && !isNaN(rangeMinString)) {
                        if ((rangeMin > Number(formElementValue))) {
                            isValid = false;
                            errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + ' ' + traducir("es inferior al minimo (") + rangeMin + ')\n');
                            document.getElementById(formElement.id).focus();
                        }
                    } else { //-- caso contrario se compara como cadenas de texto
                        if ((rangeMinString > formElementValue)) {
                            isValid = false;
                            errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + ' ' + traducir("es inferior al minimo (") + rangeMinString + ')\n');
                            document.getElementById(formElement.id).focus();
                        }
                    }
                }
                if (formElement.getAttribute('rangemax') != null) {
                    var rangeMaxString = formElement.getAttribute('rangemax');
                    var rangeMax = Number(rangeMaxString);
                    //--Si ambos valores son numericos se compara a nivel numerico
                    if (!isNaN(formElementValue) && !isNaN(rangeMaxString)) {
                        if (rangeMax < Number(formElementValue)) {
                            isValid = false;
                            errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + ' ' + traducir("excede el maximo (") + rangeMax + ')\n');
                            document.getElementById(formElement.id).focus();
                        }
                    } else { //-- caso contrario se compara como cadenas de texto
                        if (rangeMaxString < formElementValue) {
                            isValid = false;
                            errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + ' ' + traducir("excede el maximo (") + rangeMaxString + ')\n');
                            document.getElementById(formElement.id).focus();
                        }
                    }
                }
                var regex = null;
                try {
                    if (formElement.getAttribute('regex') != null) {
                        regex = new RegExp(formElement.getAttribute('regex'));
                    }
                } catch (e) { //En caso de una expresion mal formada, se evita que se rompa el javascript.
                    regex = null;
                }
                var regexDesc = formElement.getAttribute('regexDesc');
                if (formElement.getAttribute('checkfloat') != null && formElement.getAttribute('checkfloat') != '') {
                    if (regex == null) {
                        regex = /^(\ +|-)?\d{0,15}[[.,]?\d{0,13}]?$/;
                        if (regexDesc == null) regexDesc = ' ' + traducir('El numero debe tener como maximo 15 enteros y 13 decimales.');
                        else regexDesc += ' ' + traducir('El numero debe tener como maximo 15 enteros y 13 decimales.');
                    }
                    if (!regex.test(formElementValue)) {
                        isValid = false;
                        document.getElementById(formElement.id).focus();
                        if (regexDesc == null) {
                            errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + ' ' + traducir('debe ser un numero') + "\n");
                        } else {
                            errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + " " + regexDesc + '\n');
                        }
                    } else {
                        var aux = formElementValue.replace(/,/, ".");
                        if (aux.indexOf(',') > 0 || isNaN(aux)) {
                            if (formElement.getAttribute('checkfloat') == 'doCheck') {
                                isValid = false;
                                errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + ' ' + traducir("numero mal formado.") + ' ' + '\n');
                                // var aux = formElementValue.replace(/,/,".");
                                // formElement.value = aux;
                            }
                        }
                    }
                } else if (formElement.getAttribute('checkint') != null) {
                    if (regex == null) {
                        regex = /^(\ +|-)?[0-9]+$/;
                    }
                    if (!regex.test(formElementValue)) {
                        isValid = false;
                        document.getElementById(formElement.id).focus();
                        if (regexDesc == null) {
                            errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + ' ' + traducir('debe ser un numero entero') + "\n");
                        } else {
                            errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + " " + regexDesc + '\n');
                        }
                    }
                } else if (formElement.getAttribute('checkdate') != null) {
                    var dateFormat = formElement.getAttribute('dateformat');
                    if (!isDate(formElementValue, dateFormat)) {
                        isValid = false;
                        document.getElementById(formElement.id).focus();
                        errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + ' ' + traducir('debe ser una fecha valida (dd/mm/yyyy)') + "\n");
                    } else { // Valido el rango
                        var fecha = formElementValue.split('/');
                        fecha = new Date(fecha[2], Number(fecha[1]) - 1, fecha[0]);
                        var rest = formElement.getAttribute('rest');
                        //si lo tengo que buscar de otro campo, obtengo los componentes
                        var resb = formElement.getAttribute('resb');
                        if (rest != null) {
                            // si el valor debe estar entre dos valores
                            if (rest == 'entre') {
                                var down = formElement.getAttribute('down');
                                var topDate = formElement.getAttribute('top');
                                var elemDown = null;
                                var elemTop = null;
                                var elemDownCaption = '';
                                var elemTopCaption = '';
                                // si busco las fechas en otros campos
                                if (resb == 'idRadio') {
                                    var downId = down;
                                    down = null;
                                    if (downId != null) {
                                        elemDown = document.getElementById(downId);
                                        if (elemDown != null) {
                                            down = elemDown.value;
                                            elemDownCaption = elemDown.getAttribute('caption');
                                        }
                                    }
                                    var topId = topDate;
                                    topDate = null;
                                    if (topId != null) {
                                        elemTop = document.getElementById(topId);
                                        if (elemTop != null) {
                                            topDate = elemTop.value;
                                            elemTopCaption = elemTop.getAttribute('caption');
                                        }
                                    }
                                    if (down == null || topDate == null) {
                                        isValid = false;
                                        errorMessage = setErrorMessage(errorMessage, formElement, traducir('El elemento') + ' ' + formElement.getAttribute('caption') + ' ' + traducir('debe estar entre los valores correspondientes a los campos') + ' ' + elemDownCaption + ' ' + traducir('y') + ' ' + elemTopCaption + ' ' + traducir('los cuales son invalidos.') + "\n");
                                    }
                                }
                                //los fechas ya vienen seteadas o ya las levante de los otros campos
                                if (down != null) {
                                    elemDownCaption = down;
                                    down = down.split('/');
                                    down = new Date(down[2], Number(down[1]) - 1, down[0]);
                                    if (fecha < down) {
                                        isValid = false;
                                        errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + ' ' + traducir('debe ser una fecha mayor a') + ' ' + elemDownCaption + '\n');
                                    }
                                }
                                if (topDate != null) {
                                    topDateString = topDate;
                                    topDate = topDate.split('/');
                                    topDate = new Date(topDate[2], Number(topDate[1]) - 1, topDate[0]);
                                    if (fecha > topDate) {
                                        isValid = false;
                                        errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + ' ' + traducir('debe ser una fecha menor a') + ' ' + topDateString + '\n');
                                    }
                                }
                            } else { // si no esta entre dos valores
                                date = formElement.getAttribute('date');
                                //me fijo si el valor es el id de otro coponente
                                if (resb == 'idRadio') {
                                    var dateId = date;
                                    date = null;
                                    if (dateId != null) {
                                        var elemDate = document.getElementById(dateId);
                                        if (elemDate != null) date = elemDate.value;
                                        if (date == null) {
                                            isValid = false;
                                            errorMessage = setErrorMessage(errorMessage, formElement, traducir('El elemento') + ' ' + formElement.getAttribute('caption') + ' ' + traducir('se debe comparar contra el campo') + ' ' + elemDate.getAttribute('caption') + ' ' + traducir('el cual es invalido.') + "\n");
                                        }
                                    }
                                }
                                var dateValue = date;
                                date = date.split('/');
                                date = new Date(date[2], Number(date[1]) - 1, date[0]);
                                typ = rest;
                                if (typ == 'less') {
                                    if (fecha >= date) {
                                        isValid = false;
                                        errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + ' ' + traducir('debe ser una fecha menor a') + ' ' + dateValue + '\n');
                                    }
                                }
                                if (typ == 'lessOrEqual') {
                                    if (fecha > date) {
                                        isValid = false;
                                        errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + ' ' + traducir('debe ser una fecha menor o igual a') + ' ' + dateValue + '\n');
                                    }
                                }
                                if (typ == 'more') {
                                    if (fecha <= date) {
                                        isValid = false;
                                        errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + ' ' + traducir('debe ser una fecha mayor a') + ' ' + dateValue + '\n');
                                    }
                                }
                                if (typ == 'moreOrEqual') {
                                    if (fecha < date) {
                                        isValid = false;
                                        errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + ' ' + traducir('debe ser una fecha mayor o igual a') + ' ' + dateValue + '\n');
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if (regex != null) {
                        var validateRegex = true;
                        // es un campo extra de un radio button
                        if (!(formElement.id === 'undefined') && formElement.id.indexOf('extraField_') >= 0) {
                            var dependantElement = document.getElementById(formElement.getAttribute('dependant'));
                            validateRegex = validateRegex && dependantElement.checked;
                        }
                        if (validateRegex && !regex.test(formElementValue)) {
                            isValid = false;
                            document.getElementById(formElement.id).focus();
                            if (regexDesc == null) {
                                errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + ' ' + traducir('tiene un formato incorrecto') + "\n");
                            } else {
                                errorMessage = setErrorMessage(errorMessage, formElement, formElement.getAttribute('caption') + " " + regexDesc + '\n');
                            }
                        }
                    }
                }
            }
        }
    } // termina la validacion del form
    // Se valida si existe el atributo del avatar para que sea obligatorio
    if (document.getElementById('avatarIsNotNull') != null && document.getElementById('avatarIsNotNull').value) {
        var img = document.getElementById('currentImg').src;
        var url = img.split('/');
        if (url[url.length - 1] == 'default.png') {
            isValid = false;
            errorMessage = traducir('Debe seleccionar un avatar');
        }
    }
    if (document.getElementById('second-factor') != null && document.getElementById('main_form_modal') != null) {
        var formSecondFactor = document.getElementById('main_form_modal');
        for (var i = 0; i < formSecondFactor.elements.length; i++) {
            var formElementValue = '';
            var pageItem = retrieveFormElement(formSecondFactor, i);
            var itemRequiered = pageItem.hasAttribute('required')
            if (itemRequiered && pageItem.value == '') {
                isValid = false;
                if (pageItem.hasAttribute('validationMessage')) {
                    errorMessage = setErrorMessage(errorMessage, pageItem, pageItem.getAttribute('validationMessage') + "\n");
                } else {
                    errorMessage = setErrorMessage(errorMessage, pageItem, pageItem.getAttribute('caption') + ' ' + traducir("es obligatorio") + "\n");
                }
                document.getElementById(formElement.id).focus();
            }
        }
    }
    if (CyberBank.validator.validateHourFieldsConsistency()) {
        isValid = false;
        errorMessage += CyberBank.validator.getErrors();
    }
    if (!isValid) {
        showError(errorMessage);
    }
    return isValid;
}

function setErrorMessage(errorMessage, formElement, text) {
    // alert($('#'+formElement.id).attr("id"));
    idGroup = $('#' + formElement.id).attr('idgroup');
    if (idGroup) {
        $('#label_' + idGroup).addClass("error");
    } else {
        $('#label_' + formElement.id).addClass("error");
    }
    $('#' + formElement.id).addClass("error");
    return errorMessage + text;
}

function showError(errorMessage) {
    $("#errorPanelCollection").hide();
    var errorMessageComplete = buildErrorMessage(errorMessage);
    if ($("#errorPanelModal").val() == "true") {
        modalError.alert(errorMessageComplete);
    } else {
        showErrorPanel(errorMessageComplete, false);
    }
}

function showTimeoutError(errorMessage) {
    showErrorPanel(errorMessage, true);
}

function buildErrorMessage(msg) {
    var arrayMsg = msg.split("\n");
    var outPut = "<p tabindex=\"0\"; class=\"error-panel_title\">" + traducir("Lo sentimos. Han ocurrido errores en el ingreso de datos:") + "</p><br><ul tabindex=\"0\"; class=\"error-panel_list\">";
    for (var i = 0; i < arrayMsg.length; i++) {
        if (arrayMsg[i].length == 0) {
            continue;
        } else {
            outPut += "<li>" + arrayMsg[i] + "</li>";
        }
    }
    outPut = outPut + "</ul>" + "<textarea id=\"textoDiv\" rows=\"4\" cols=\"50\"></textarea>";
    return outPut;
}

function showErrorPanel(msg, changeMessage) {
    var destDiv = "#errorPanel";
    if ($("#modalErrorPanel").length > 0) {
        destDiv = "#modalErrorPanel";
        changeMessage = true;
    } else if ($("#errorPanelLogin_name").length > 0) {
        destDiv = "#errorPanelLogin_name";
    } else if ($("#errorPanelLogin_password").length > 0) {
        destDiv = "#errorPanelLogin_password";
    } else if ($("#errorPanelAutoAdhesion").length > 0) {
        destDiv = "#errorPanelAutoAdhesion";
        changeMessage = true;
    } else if ($("#errorPanelAuthentication").length > 0) {
        destDiv = "#errorPanelAuthentication";
        changeMessage = true;
    } else {
        $(destDiv).html(msg);
    }
    if (changeMessage == true) {
        $(destDiv).html(msg);
    }
    $(destDiv).fadeIn(800);
    $(window).scrollTop(0);
    var temporal = document.createElement("div");
    temporal.innerHTML = msg;
    var texto = temporal.textContent || temporal.innerText || "";
    if ($("#textoDiv") != null) {
        $("#textoDiv").val(texto);
        $("#textoDiv").focus();
        $("#textoDiv").hide();
    }
}

function hideErrorPanel() {
    var destDiv = "#errorPanel";
    $(destDiv).hide();
    $('#errorModalCollection').remove();
    $("#errorPanelCollection").remove();
}

function showUploadError(msg) {
    var destDiv = "#uploadError";
    $(destDiv).html(msg);
    $(destDiv).fadeIn(800);
}

function hideUploadError() {
    var destDiv = "#uploadError";
    $(destDiv).html("");
    $(destDiv).fadeOut(800);
}
//element el elemento en cuestion, es o la hora o los minutos, ya que estan en campos separados
//type  puede ser 'TIME_HR' o 'TIME_MIN', depende que parte del campo hora este validando
function validateTimeConstrain(element, type) {
    var error = '';
    var tiempo = parseInt(element.value);
    // tipo de restriccion
    var rest = element.getAttribute('rest');
    // si lo tengo que buscar de otro campo, obtengo los componentes
    var resb = element.getAttribute('resb');
    if (rest != null) {
        // si el valor debe estar entre dos valores
        if (rest == 'entre') {
            var down = element.getAttribute('down');
            var topDate = element.getAttribute('top');
            var elemDown = null;
            var elemTop = null;
            var elemDownCaption = '';
            var elemTopCaption = '';
            // si busco las fechas en otros campos
            if (resb == 'idRadio') {
                var downId = down;
                down = null;
                if (downId != null) {
                    elemDown = document.getElementById(downId + type);
                    if (elemDown != null) {
                        down = elemDown.value;
                        elemDownCaption = elemDown.getAttribute('caption');
                    }
                }
                var topId = topDate;
                topDate = null;
                if (topId != null) {
                    elemTop = document.getElementById(topId + type);
                    if (elemTop != null) {
                        topDate = elemTop.value;
                        elemTopCaption = elemTop.getAttribute('caption');
                    }
                }
                if (down == null || topDate == null) {
                    isValid = false;
                    error = error + traducir('El elemento') + ' ' + element.getAttribute('caption') + ' ' + traducir('debe estar entre los valores correspondientes a los campos') + ' ' + elemDownCaption + ' ' + traducir('y') + ' ' + elemTopCaption + ' ' + traducir('los cuales son invalidos.') + "\n";
                }
            } else {
                // obtengo la parte que corresponde al typo que estoy comparando
                if (type == 'TIME_HR') {
                    down = down.split(":")[0];
                    topDate = topDate.split(":")[0];
                } else {
                    down = down.split(":")[1];
                    topDate = topDate.split(":")[1];
                }
            }
            //los fechas ya vienen seteadas o ya las levante de los otros campos
            if (down != null) {
                down = parseInt(down);
                if (tiempo < down) {
                    isValid = false;
                    error = error + element.getAttribute('caption') + ' ' + traducir('debe ser una hora mayor a') + ' ' + elemDownCaption + '\n';
                }
            }
            if (topDate != null) {
                topDate = parseInt(topDate);
                if (tiempo > topDate) {
                    isValid = false;
                    error = error + element.getAttribute('caption') + ' ' + traducir('debe ser una hora menor a') + ' ' + elemTopCaption + '\n';
                }
            }
        } else { // si no esta entre dos valores
            date = element.getAttribute('date');
            // me fijo si el valor es el id de otro coponente
            if (resb == 'idRadio') {
                var dateId = date;
                date = null;
                if (dateId != null) {
                    var elemDate = document.getElementById(dateId + type);
                    if (elemDate != null) date = elemDate.value;
                }
                if (date == null) {
                    isValid = false;
                    error = error + traducir('El elemento') + ' ' + element.getAttribute('caption') + ' ' + traducir('se debe comparar contra el campo') + ' ' + elemDate.getAttribute('caption') + ' ' + traducir('el cual es invalido.') + "\n";
                }
            }
            var dateValue = date;
            typ = rest;
            date = parseInt(date);
            if (typ == 'less') {
                if (tiempo >= date) {
                    isValid = false;
                    error = error + element.getAttribute('caption') + ' ' + traducir('debe ser una hora menor a') + ' ' + dateValue + '\n';
                }
            }
            if (typ == 'lessOrEqual') {
                if (tiempo > date) {
                    isValid = false;
                    error = error + element.getAttribute('caption') + ' ' + traducir('debe ser una hora menor o igual a') + ' ' + dateValue + '\n';
                }
            }
            if (typ == 'more') {
                if (tiempo <= date) {
                    isValid = false;
                    error = error + element.getAttribute('caption') + ' ' + traducir('debe ser una hora mayor a') + ' ' + dateValue + '\n';
                }
            }
            if (typ == 'moreOrEqual') {
                if (tiempo < date) {
                    isValid = false;
                    error = error + element.getAttribute('caption') + ' ' + traducir('debe ser una hora mayor o igual a') + ' ' + dateValue + '\n';
                }
            }
        }
    }
    return error;
}
var procesando = false;
var timerId = 0;

function anularTimeout(id) {
    setProcesando(false);
    window.clearTimeout(id);
}

function setProcesando(valor) {
    procesando = valor;
}
var formID;
var actionID;
var validate = false;
var selectedRowIDForEventAction;
var executionUUID = '';

function setVariables(form, action, val) {
    formID = form;
    actionID = action;
    validate = val;
    if ($('#main_form_modal').length > 0) {
        executionUUID = $('#main_form_modal > #uuid_ajax').val();
    } else {
        executionUUID = $('#main_form > #uuid_ajax').val();
    }
    updateActualFocus(action);
}

function setVariables(form, action, val, rowKey) {
    formID = form;
    actionID = action;
    validate = val;
    selectedRowIDForEventAction = rowKey;
    updateActualFocus(action);
    if ($('#main_form_modal').length > 0) {
        executionUUID = $('#main_form_modal > #uuid_ajax').val();
    } else {
        executionUUID = $('#main_form > #uuid_ajax').val();
    }
}

function mostrarEnEjecucion() {
    $.showprogress();
}

function setTabSeleccionado(idComponent) {
    $("table[id^='tabComponent']").each(function() {
        $(this).eq(0).find('tr td span button').each(function() {
            $(this).attr('seleccionado', 'false');
            $(this).attr('currentTab', 'false');
            var ariaLabel = $(this).find("p").text() + ". Pestaña inactiva.";
            $(this).attr('aria-label', ariaLabel);
        });
    });
    if (idComponent) {
        $("#" + idComponent).attr('seleccionado', 'true');
        $("#" + idComponent).attr('currentTab', 'true');
        var ariaLabel = $("#" + idComponent).find("p").text() + ". Pestaña activa.";
        $("#" + idComponent).attr('aria-label', ariaLabel);
        $("input[id='tab']").each(function() {
            $(this).val(idComponent);
        });
    }
}

function unsetTabSeleccionado() {
    //	$("input[id='tab']").each(function(){
    //		$(this).val('');
    //	});
}
var container2Draw;

function callSubmit(containerToDraw) {
    setTimeout(function() {
        container2Draw = containerToDraw;
        submitFormByAjax(formID, actionID, validate);
    }, 100);
}
var ruleServiceInvalidation = false;

function submitFormByAjax(formID, actionID, validateParam) {
    try {
        if (!isValidInvocation(actionID)) {
            return;
        }
        // Valida si alguna regla de servicio invalido el orden de ejecución
        if (ruleServiceInvalidation) {
            // blanquea para no invalidar otras ejecuciones posteriores
            // $('#errorPanel').show();
            ruleServiceInvalidation = false;
            $.hideprogress();
            return false;
        }
        //funcion auxiliar. por default está vacía, reimplementar en cyberbank-customized
        preProcessingSubmit();
        if (actionID != 'autoLoad') {
            hideErrorPanel();
        }
        window.status = traducir("Ejecutando...");
        closeCalendars();
        if (procesando == false) {
            setProcesando(true);
            timerId = window.setTimeout('setProcesando(false)', 7000);
        } else {
            $.hideprogress();
            return;
        }
        var mapToContext = true;
        var htmlElement = document.getElementById(actionID);
        if (htmlElement != null) {
            if (htmlElement.getAttribute('selectionmode') != '0') {
                if (htmlElement.getAttribute('colsToValidate') != null) {
                    if (!validateCollections(htmlElement.getAttribute('colsToValidate'))) {
                        anularTimeout(timerId);
                        $.hideprogress();
                        return;
                    }
                }
            }
            if (htmlElement.className.indexOf("action-button") != -1) {
                if ($("#" + htmlElement.id).text() == traducir("Salir") || $("#" + htmlElement.id).text() == traducir("Finalizar") || $("#" + htmlElement.id).text() == traducir("Cancelar")) {
                    validateParam = false;
                }
                closeCalendars();
            }
            if (htmlElement.getAttribute('validationEnable') == 'false') {
                validateParam = false;
            }
            if (htmlElement.getAttribute('mapToContext') == 'false') {
                mapToContext = false;
            }
        }
        var formObject = null;
        try {
            formObject = getValidationElems(htmlElement.id, formID);
        } catch (e) {
            validateParam = false;
        }
        if ((!validateParam || (validateForm(formObject)) && validateSecondFactor())) {
            document.getElementById('execute').value = actionID;
            if (container2Draw && (undefined != container2Draw) && (container2Draw.indexOf("secondFactorContainer") != -1)) {
                setContainer2Draw('secondFactorContainer');
            }
            var parameters = '';
            if (mapToContext) parameters = encodeForm(formID) + "&" + encodeSecondFactor(parameters);
            else parameters = encodeHiddenElemOfForm(formID);
            $("#modalWindow").jqmHide();
            updateAllHiddenColumns();
            var dataToSend = "";
            if (CyberBank.encryption.enable) {
                var p_temp = getRandomPassword();
                parameters = JSON.stringify(createSecureRequest(parameters, p_temp));
                dataToSend = {
                    parameters: parameters
                }
            } else {
                dataToSend = parameters;
            }
            $.ajaxInvoker({
                // encode parameters
                type: 'POST',
                url: 'index',
                data: dataToSend,
                headers: {
                    'Content-type': 'application/x-www-form-urlencoded; charset=UTF8' /* ,'Connection':'close' */ ,
                    'Get-Form': 'true'
                },
                async: false
            }).done(function(data, textStatus, resp) {
                submitFormByAjax_DoneLogic(data, p_temp);
            }).fail(function(data, textStatus, resp) {
                submitFormByAjax_FailLogic(data, textStatus, resp, p_temp);
            }).always(function() {
                container2Draw = null;
                showModalWindow();
            });
        } else {
            $.hideprogress();
            anularTimeout(timerId);
            clearTabComponent();
        }
        //solo para explorer
        window.status = "";
        if ($($('form#main_form #errorPanelCollection p')) != null && $($('form#main_form #errorPanelCollection p')).length > 0) {
            if ($("#textoError").length == 0) {
                var errorText = $($('form#main_form #errorPanelCollection p')[0]).text();
                $("#errorPanelCollection").append("<textarea id=\"textoError\" autofocus tabindex=\"0\" rows=\"4\" cols=\"50\"></textarea>");
                $("#textoError").val(errorText);
                $("#textoError").focus();
                $("#textoError").hide();
            } else if ($("#textoError").length > 0) {
                $("#textoError").focus();
                $("#textoError").hide();
            }
        }
        if ($(".msg-error") != null && $(".msg-error").length > 0) {
            if ($("#error").length == 0) {
                var texto = $(".msg-error").text();
                $(".msg-error").append("<textarea id=\"error\" autofocus tabindex=\"0\" rows=\"4\" cols=\"50\"></textarea>");
                $("#error").val(texto);
                $("#error").focus();
                $("#error").hide();
            } else if ($("#error").length > 0) {
                $("#error").focus();
                $("#error").hide();
            }
        }
    } catch (err) {
        CyberBank.utils.logError(err);
    }
}

function submitFormByAjax_DoneLogic(data, p_temp) {
    var respText = data;
    if (CyberBank.encryption.enable) {
        respText = resolveSecureResponse(data, p_temp);
    }
    /*Se evalua si se acaba de superar el login para cargar el base_document
     * en pantalla completa(header, footer, menu, marketing y demas widgets*/
    if (successLogin(respText)) {
        $('#seleccion').val("successLogin");
        $("#loginForm").submit();
        return;
    } else {
        if (container2Draw && undefined != container2Draw) {
            if (trim(respText) == "logout") {
                doLogout();
                return true;
            }
            //Si es un componente tipo tab.
            if ((container2Draw.indexOf("solapa") != -1) && (container2Draw.indexOf("secondFactorContainer") == -1)) {
                var tabSelected = searhTabSelected();
                var id = '';
                if (tabSelected) {
                    tabSelected.parent().parent().parent().parent().parent().find($("div[id^='solapa-']"));
                    id = tabSelected.attr('id');
                    var t = $("#solapa");
                    if (t) {
                        $("#solapa").attr('id', "solapa-" + id);
                    }
                    tabSelected.parent().parent().parent().parent().parent().find($("div[id^='solapa-']")).attr('id', "solapa-" + id);
                }
                container2Draw = "solapa-" + id;
                var comp = $("#" + container2Draw);
                /* VIEW-1131: Modal+Tab.
                 * Si es una ventana modal dentro de un tab, el render del html se debe hacer en el container y no dentro del tab
                 * eprieto
                 */
                // if (isModalResponse(respText)) {
                // if (isAnyBackGroundLayout()) {
                // comp = document.getElementById('container');
                // }
                // }
                $(comp).html(getResponseTextInTab(respText, comp.attr("id")));
                // Se acrualiza el uuid del contenedor padre
                var newuuid = $("#" + container2Draw + " input[name='uuid']").val();
                $("input[name='uuid']").val(newuuid);
                clearTabComponent();
            } else {
                // Si es un componente tipo segundo factor.
                if (container2Draw.indexOf("secondFactorContainer") != -1) {
                    $("div > #secondFactorContainer").each(function() {
                        if (respText.indexOf("secondFactorContainer") != -1 && $('#modalWindow').length) {
                            var divSecondFactor = $('<div>').html(respText);
                            var formContent = divSecondFactor.find('form').html();
                            divSecondFactor.find('form').after(formContent);
                            divSecondFactor.find('form').remove();
                            respText = divSecondFactor.html();
                            $(this).html(getResponseText(respText));
                        }
                        if ($(this).is(':visible')) {
                            $(this).html(getResponseText(respText));
                        }
                        secondFactorLoading = false;
                    });
                    setContainer2Draw('secondFactorContainer');
                } else {
                    // Si es cualquier componente
                    var comp = $("#" + container2Draw);
                    $(comp).html(getResponseText(respText));
                    setContainer2Draw('');
                }
            }
        } else {
            if (trim(respText) == "logout") {
                doLogout();
            } else {
                try {
                    $("#container").html(getResponseText(respText));
                    reloadWidgets();
                } catch (err) {
                    console.error(err);
                    CyberBank.utils.logError(err);
                    console.log("submitFormByAjax - ERROR:  " + err.message);
                }
            }
        }
    }
    anularTimeout(timerId);
    if (document.getElementById("newUser") != null)
        if (document.getElementById("newUser").value == "false") {
            document.getElementById("login").innerHTML = respText;
            fillUuid();
            return;
        }
    var cap = $(respText).find("#captchaValido"); // VIEW-1214
    var captcha = false;
    if (cap != null)
        if ((cap != undefined) && (cap.length > 0)) // VIEW-1214
            captcha = cap[0].value;
    if (captcha == 'false') {
        showError(traducir("Campo de validacion invalido."));
        fillUuid();
    } else {
        if (!cargarPagina(respText, false)) {
            fillUuidByResponse(null);
            showSubMenu(lastSubmenu);
        } else {
            fillUuid();
        }
    }
    // MJM: objeto utils
    CyberBank.utils.resetButtonCursors();
    hideAllColumns();
    validateAllMaxColumnFilter();
    if (!secondFactorLoading) {
        $.hideprogress();
    }
    cargarDocumentReady();
}

function submitFormByAjax_FailLogic(data, textStatus, resp, p_temp) {
    if (CyberBank.encryption.enable) {
        if (typeof data === "string") {
            data = $.parseJSON(data);
        }
        handleTokens(data);
        var respText = resolveSecureResponse(data, p_temp);
    }
    var extrainfo = getExtraDataOnFail(data, textStatus, resp);
    displayTimeoutError(extrainfo);
    $.hideprogress();
}

function displayTimeoutError(extrainfo) {
    if ($("#loginForm").length > 0) {
        showTimeoutError(traducir('No se puede establecer conexion con el Servidor') + extrainfo);
        cleanUuid();
    } else {
        showTimeoutError(traducir('No se puede establecer conexion con el Servidor') + extrainfo);
        if ($('#errorPanel').length > 0) {
            var errorpanel = $('#errorPanel').css({
                'margin-bottom': '400px'
            });
            $('#container').html("").append(errorpanel);
        }
    }
}

function getTimeoutError(errorMsg) {
    var html = "<p class=\"error-panel_title\">" + errorMsg + "</p><br>";
    html += "<p>" + "<a href=\"javascript:submitSubmenuByAjax('massiveSelectCustomerOperationSeleccionConsolidadaFramework');\">Ir al inicio</a>" + "</p>";
    return html;
}

function validateCollections(colecciones) {
    var ids = colecciones.split(',');
    var id = null;
    var elementById = null;
    for (var k in ids) {
        id = ids[k];
        elementById = document.getElementById(id);
        if (elementById != undefined && !isChecked(elementById)) {
            return false;
        }
    }
    return true;
}

function isChecked(col) {
    var filas = col.tBodies[0].rows.length;
    if (filas == 0) {
        showError(traducir("No hay elementos para ejecutar la operacion"));
        return false;
    }
    for (var i = 0; i < filas; i++) {
        if (col.tBodies[0].rows[i].cells[0].firstChild == null) {
            continue;
        }
        if (col.tBodies[0].rows[i].cells[0].firstChild.checked) {
            return true;
        }
    }
    showError(traducir("Debe seleccionar un elemento"));
    return false;
}

function fillUuidByResponse(xml) {
    if (xml != null) {
        var uold = document.getElementById("uuid");
        var unew = xml.getElementsByTagName("input")[0];
        uold.value = unew.attributes[3].nodeValue;
    }
}

function cleanUuid() {
    var uold = document.getElementById("uuid");
    var unew = document.getElementById("uuid_ajax");
    uold.value = "";
    unew.value = "";
}

function fillUuid() {
    var uold = document.getElementById("uuid");
    var unew = document.getElementById("uuid_ajax");
    if(uold && unew)
        uold.value = unew.value;
}

function setUidForJsp(uid) {
    var unew = document.getElementById("uuid_ajax");
    unew.value = uid;
    uold.value = unew.value;
}

function submitGoButton() {
    var parameters = '';
    var formElement = '';
    var inputSelection;
    var selection = document.getElementById("testinput");
    setearTextoBarraEstado(traducir("Cargando item seleccionado:") + ' ' + selection.value);
    if (validarCodigo(selection.value) || selection.value != "") {
        formElement = document.getElementById('uuid');
        parameters += formElement.name + '=' + encodeURIParams(formElement.value) + '&';
        parameters += selection.name + '=' + encodeURIComponent(selection.value) + '&';
        parameters = parameters.substr(0, (parameters.length - 1));
        cleanMarketing();
        var dataToSend = "";
        if (CyberBank.encryption.enable) {
            var p_temp = getRandomPassword();
            parameters = JSON.stringify(createSecureRequest(parameters, p_temp));
            dataToSend = {
                parameters: parameters
            }
        } else {
            dataToSend = parameters;
        }
        $.ajaxInvoker({
            type: 'POST',
            url: 'index',
            data: dataToSend,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Code-Alias': selection.value
            },
            async: false
        }).done(function(data, textStatus, resp) {
            var respText = data;
            if (CyberBank.encryption.enable) {
                respText = resolveSecureResponse(data, p_temp);
            }
            hideContainer();
            cargarPrimerLayout(respText, "");
            fillUuid();
            borrarTextoBarraEstado();
            loadMarketing();
        }).always(function() {
            document.getElementById("dropdowndiv").style.display = "none";
        });
    }
}

function submitPendingTrxs(workflowId) {
    var parameters = '';
    var formElement = '';
    formElement = document.getElementById('uuid');
    parameters += 'seleccion' + '=' + encodeURIComponent(workflowId) + '&';
    parameters += formElement.name + '=' + encodeURIParams(formElement.value) + '&';
    parameters = parameters.substr(0, (parameters.length - 1));
    var dataToSend = "";
    if (CyberBank.encryption.enable) {
        var p_temp = getRandomPassword();
        parameters = JSON.stringify(createSecureRequest(parameters, p_temp));
        dataToSend = {
            parameters: parameters
        }
    } else {
        dataToSend = parameters;
    }
    $.ajaxInvoker({
        type: 'POST',
        url: 'index',
        data: dataToSend,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Get-Form': 'true'
        },
        async: false
    }).done(function(data, textStatus, resp) {
        var respText = data;
        if (CyberBank.encryption.enable) {
            respText = resolveSecureResponse(data, p_temp);
        }
        hideContainer();
        cargarPrimerLayout(respText, "");
        fillUuid();
    }).always(function() {
        //TODO
    });
}
var seleccionado;

function submitSubmenuByAjax(workflowId) {
    submitSubmenuByAjax(workflowId, null, null);
}

function submitSubmenuByAjax(workflowId, menuId, path) {
    try {
        submitSubmenuByAjaxInternal(workflowId, menuId, path)
    } catch(error) {
        CyberBank.utils.logError(error);
    }
}

function submitSubmenuByAjaxInternal(workflowId, menuId, path) {
    // se limpia la campania
    cleanMarketing();
    //sirve para hacer cosas previo a ejecutar el menu, se define en los customized
    executePreConditionWhenOpenWorkflow();
    var str = '';
    var formElement = '';
    str += 'seleccion=' + encodeURIParams(workflowId) + '&';
    str += 'menuId=' + encodeURIParams(menuId) + '&';
    str += 'path=' + encodeURIParams(path) + '&';
    formElement = document.getElementById('uuid');
    str += formElement.name + '=' + encodeURIParams(formElement.value) + '&';
    formElement = document.getElementById('IDContexto');
    if (formElement != null) {
        str += formElement.name + '=' + encodeURIParams(formElement.value) + '&';
    }
    str = str.substr(0, (str.length - 1));
    $("#modalWindow").jqmHide();
    var dataToSend = "";
    if (CyberBank.encryption.enable) {
        var p_temp = getRandomPassword();
        str = JSON.stringify(createSecureRequest(str, p_temp));
        dataToSend = {
            parameters: str
        }
    } else {
        dataToSend = str;
    }
    $.ajaxInvoker({
        type: 'POST',
        url: 'index',
        data: dataToSend,
        headers: {
            'Content-type': 'application/x-www-form-urlencoded; charset=UTF8',
            'Get-Form': 'true'
        },
        async: true,
        beforeSend: function() {
            $.showprogress();
        }
    }).done(function(data, textStatus, resp) {
        var respText = data;
        if (CyberBank.encryption.enable) {
            respText = resolveSecureResponse(data, p_temp);
        }
        if (trim(respText) != "logout") {
            hideContainer();
            widgetAsyncIds.length = 0;
            cargarPrimerLayout(respText, workflowId);
            validateAllMaxColumnFilter();
            fillUuid();
            CyberBank.utils.resetButtonCursors();
            showModalWindow();
            reloadWidgets();
            loadMarketing();
            if ($($('form#main_form #errorPanelCollection p')) != null && $($('form#main_form #errorPanelCollection p')).length > 0) {
                if ($("#textoError").length == 0) {
                    var errorText = $($('form#main_form #errorPanelCollection p')[0]).text();
                    $("#errorPanelCollection").append("<textarea id=\"textoError\" autofocus tabindex=\"0\" rows=\"4\" cols=\"50\"></textarea>");
                    $("#textoError").val(errorText);
                    $("#textoError").focus();
                    $("#textoError").hide();
                } else if ($("#textoError").length > 0) {
                    $("#textoError").focus();
                    $("#textoError").hide();
                }
            }
            if ($(".msg-error") != null && $(".msg-error").length > 0) {
                if ($("#error").length == 0) {
                    var texto = $(".msg-error").text();
                    $(".msg-error").append("<textarea id=\"error\" autofocus tabindex=\"0\" rows=\"4\" cols=\"50\"></textarea>");
                    $("#error").val(texto);
                    $("#error").focus();
                    $("#error").hide();
                } else if ($("#error").length > 0) {
                    $("#error").focus();
                    $("#error").hide();
                }
            }
        } else {
            if (trim(respText) == "logout") {
                doLogout();
            }
        }
    }).fail(function(data, textStatus, resp) {
        var extraData = getExtraDataOnFail(data, textStatus, resp);
        showError(traducir('No se puede establecer conexion con el Servidor') + extraData);
    }).always(function() {
        $.hideprogress();
    });
}

// campania
function loadMarketing() {
    if (document.getElementById('epExist') != null && document.getElementById('epExist').value == 'true') {
        var httpMark = getHTTPObject();
        var strReq = '';
        var formElement = '';
        formElement = document.getElementById('uuid');
        strReq += formElement.name + '=' + encodeURIParams(formElement.value) + '&';
        strReq += "campania=true&mode=load";
        httpMark.open('POST', 'index', true);
        httpMark.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        httpMark.setRequestHeader('Get-Form', 'true');
        try {
            httpMark.send(strReq);
        } catch (e) {
            showError(traducir('Fallo actualizacion marketing. No se puede establecer conexion con el Servidor'));
        }
        httpMark.onreadystatechange = function() {
            if (httpMark.readyState == 4 && httpMark.status == 200) {
                if (httpMark.responseText != '') {
                    contents = httpMark.responseText.split('<DIFERENTE_CONTENIDO>');
                    for (var i = 0; i < contents.length; i++) {
                        var promotion = contents[i].split('<SEPARANDO_CONTENIDO>');
                        var content = document.getElementById(promotion[0] + 'Content');
                        if (content != null) {
                            content.innerHTML = promotion[1];
                        }
                    }
                }
            }
        };
    }
}

function cleanMarketing() {
    if (document.getElementById('epExist') != null && document.getElementById('epExist').value == 'true') {
        var httpMark = getHTTPObject();
        var strReq = '';
        var formElement = '';
        formElement = document.getElementById('uuid');
        strReq += formElement.name + '=' + encodeURIParams(formElement.value) + '&';
        strReq += "campania=true&mode=clean";
        httpMark.open('POST', 'index', false);
        httpMark.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        httpMark.setRequestHeader('Get-Form', 'true');
        try {
            httpMark.send(strReq);
        } catch (e) {
            showError(traducir('Fallo actualizacion marketing. No se puede establecer conexion con el Servidor'));
        }
        if (httpMark.readyState == 4) {
            if (httpMark.responseText != '') {
                slots = httpMark.responseText.replace("\r", "").replace("\n", "").split('<SEPARANDO_CONTENIDO>');
                for (var i = 0; i < slots.length; i++) {
                    if (slots[i] != '') {
                        var name = (slots[i] + 'Content');
                        if (document.getElementById(name) != null) {
                            document.getElementById(name).innerHTML = '';
                        }
                    }
                }
            }
        }
    }
}
// campania
function removeBr(cadena) {
    var subs;
    if (isIE && isIE < 8) {
        subs = cadena.split("<BR>");
    } else {
        subs = cadena.split("<br>");
    }
    var retorno = "";
    for (var k in subs) {
        retorno += subs[k];
    }
    return retorno;
}

function cargarPagina(text, reload) {
    clearTabComponent();
    if (text.indexOf('main_form_modal') != -1) {
        checkAndLoadIfSecondFactorPresent();
        return true;
    }
    if (reload == true) {
        try {
            $("#container").html(text);
        } catch (err) {
            console.log("cargarPagina - ERROR - " + err.message);
        }
        // if (container2Draw) {
        // document.getElementById(container2Draw.id).innerHTML = text;
        // } else {
        // document.getElementById("container").innerHTML = text;
        // }
    }
    var error = false;
    var container = document.getElementById("main_form");
    if (container == null) {
        return false;
    }
    // cargarJsFromAjax(text);
    // evalScript();
    drawDefaultCssTabs();
    var tabSelected = searhTabSelected();
    if ((!tabSelected || reload == true) && !isDrawInTab()) {
        var tabDefault = searchIsDefaultTabPresent();
        if (tabDefault) {
            var id = tabDefault.attr('id');
            var t = $("#solapa");
            if (t) {
                $("#solapa").attr('id', "solapa-" + id);
            }
            $("div[id^='solapa-']").attr('id', "solapa-" + id);
            setTimeout(function() {
                $("#" + id).click();
            }, 10);
        }
    }
    drawHoverComponent(tabSelected);
    try {
        if ($($('form#main_form #errorPanelCollection p')) == null || $($('form#main_form #errorPanelCollection p')).length == 0) {
            document.getElementById(document.getElementById("focus").getAttribute('id_elem')).focus();
        }
    } catch (e) {}
    checkAndLoadIfSecondFactorPresent();
    return true;
}

function cargarJsFromAjax(text) {
    var search = text;
    var script;
    while (script = search.match(/(<script[^>]+javascript[^>]+>\s*(<!--)?)/i)) {
        search = search.substr(search.indexOf(RegExp.$1) + RegExp.$1.length);
        if (!(endscript = search.match(/((-->)?\s*<\/script>)/))) break;
        block = search.substr(0, search.indexOf(RegExp.$1));
        search = search.substring(block.length + RegExp.$1.length);
        var oScript = document.createElement('script');
        oScript.text = block;
        document.getElementsByTagName("head").item(0).appendChild(oScript);
    }
}

function cargarPrimerLayout(texto, workflowId, moduleFecha) {
    try {
        $("#container").html(texto);
        setTimeout(reloadAsyncWidgets, 100);
    } catch (err) {
        console.log("cargarPrimerLayout - ERROR: " + err.message);
    }
    cargarPagina(texto, false);
    showContainer();
    cargarDocumentReady();
    checkAndLoadIfSecondFactorPresent();
    try {
        if ($($('form#main_form #errorPanelCollection p')) == null || $($('form#main_form #errorPanelCollection p')).length == 0) {
            document.getElementById(document.getElementById("focus").getAttribute('id_elem')).focus();
        }
    } catch (e) {}
}

function showContainer() {
    document.getElementById("container").style.display = '';
}
// TODO: sacar
function fillSeleccion(form, workflowId) {
    form.seleccion.value = workflowId;
    submitFormByAjax(form, workflowId, false);
    // document.getElementById('seleccion').value = id;
}

function doSort(collectionID, columna, idcontexto) {
    /* tomo la tabla */
    var collection = document.getElementById(collectionID);
    /* tomo el numero de pagina actual */
    var pageNumber = parseInt(collection.getAttribute('pagenumber'));
    submitSort(collectionID, columna, pageNumber, idcontexto);
}
/*
Cambia las imagenes del paginado, para generar un efecto de habilitado e inabilitado
un valor true es habilitado, false deshabilitado
bb -> es la que va al principio
b -> vuelve 1 pagina
f -> adelanta una pagina
ff -> va hasta el final
 */
function modifyCollImages(bb, b, f, ff, collectionID) {
    if (document.getElementById("gview_" + collectionID) == null) {
        var imagesPath = document.getElementById('imagesPath').value;
        if ($("#" + collectionID + "_colImFirstPage").length > 0) {
            if (bb) {
                document.getElementById(collectionID + "_colImFirstPage").src = imagesPath + 'ImFirstPage.png';
                document.getElementById(collectionID + "_colImFirstPage").parentElement.setAttribute('activo', true);
            } else {
                document.getElementById(collectionID + "_colImFirstPage").src = imagesPath + 'ImFirstPage_Dis.png';
                document.getElementById(collectionID + "_colImFirstPage").parentElement.setAttribute('activo', false);
            }
        }
        if ($("#" + collectionID + "_colImPrevPage").length > 0) {
            if (b) {
                document.getElementById(collectionID + "_colImPrevPage").src = imagesPath + 'ImPrevPage_ui.png';
                document.getElementById(collectionID + "_colImPrevPage").parentElement.setAttribute('activo', true);
            } else {
                document.getElementById(collectionID + "_colImPrevPage").src = imagesPath + 'ImPrevPage_ui_Dis.png';
                document.getElementById(collectionID + "_colImPrevPage").parentElement.setAttribute('activo', false);
            }
        }
        if ($("#" + collectionID + "_colImNextPage").length > 0) {
            if (f) {
                document.getElementById(collectionID + "_colImNextPage").src = imagesPath + 'ImNextPage_ui.png';
                document.getElementById(collectionID + "_colImNextPage").parentElement.setAttribute('activo', true);
            } else {
                document.getElementById(collectionID + "_colImNextPage").src = imagesPath + 'ImNextPage_ui_Dis.png';
                document.getElementById(collectionID + "_colImNextPage").parentElement.setAttribute('activo', false);
            }
        }
        if ($("#" + collectionID + "_colImLastPage").length > 0) {
            if (ff) {
                document.getElementById(collectionID + "_colImLastPage").src = imagesPath + 'ImLastPage.png';
                document.getElementById(collectionID + "_colImLastPage").parentElement.setAttribute('activo', true);
            } else {
                document.getElementById(collectionID + "_colImLastPage").src = imagesPath + 'ImLastPage_Dis.png';
                document.getElementById(collectionID + "_colImLastPage").parentElement.setAttribute('activo', false);
            }
        }
    } else {
        grid.modifyGridImages(bb, b, f, ff, collectionID);
    }
}

function isGridPaging(collectionID) {
    return document.getElementById("gview_" + collectionID) != null;
}

function addEvent(obj, evType, fn) {
    var result = false;
    if (obj != null) {
        if (obj.addEventListener) {
            obj.addEventListener(evType, fn, false);
            result = true;
        } else if (obj.attachEvent) {
            obj.attachEvent('on' + evType, fn);
            result = true;
        }
    }
    return result;
}

function addCollectionSelector(cell, collectionID, elementIndex) {
    var collection = document.getElementById(collectionID);
    var selectionMode = parseInt(collection.getAttribute('selectionmode'));
    var collectionData = eval(collectionID + '_data');
    var input = document.createElement('input');
    if (selectionMode == 0) return;
    if (selectionMode == 1) input.type = 'radio';
    if (selectionMode == 2) input.type = 'checkbox';
    input.checked = (collectionData[elementIndex][1] == 'true');
    input.name = collectionID + '_element';
    input.setAttribute('collectionid', collectionID);
    input.setAttribute('elementindex', elementIndex);
    addEvent(input, 'click', selectElement);
    cell.appendChild(input);
}

function addCollectionSelectorIE(cell, collectionID, elementIndex) {
    var collection = document.getElementById(collectionID);
    var selectionMode = parseInt(collection.getAttribute('selectionmode'));
    var collectionData = eval(collectionID + '_data');
    var htmlInputCode = "";
    htmlInputCode = "<input ";
    if (selectionMode == 0) {
        htmlInputCode += " >";
        return;
    }
    if (selectionMode == 1) {
        htmlInputCode += "type='radio' ";
    }
    if (selectionMode == 2) {
        htmlInputCode += "type='checkbox' ";
    }
    if (collectionData[elementIndex][1] == 'true') {
        htmlInputCode += "checked ";
    }
    htmlInputCode += "name = " + collectionID + "_element ";
    // input.name = collectionID + '_element';
    htmlInputCode += 'collectionid' + "=" + "'" + collectionID + "' ";
    // input.setAttribute('collectionid', collectionID);
    // input.setAttribute('elementindex', elementIndex);
    htmlInputCode += "elementindex=" + "" + elementIndex + " ";
    htmlInputCode += "onclick = selectElement();";
    htmlInputCode += ">";
    // addEvent(input, 'click', selectElement);
    cell.appendChild(document.createElement(htmlInputCode));
}

function selectElement() {
    var objectEvent = null;
    if (isIE && isIE < 8) {
        objectEvent = event.srcElement;
    } else {
        objectEvent = this;
    }
    var collectionID = objectEvent.getAttribute('collectionid');
    var collection = document.getElementById(collectionID);
    var selectionMode = parseInt(collection.getAttribute('selectionmode'));
    var elementIndex = parseInt(objectEvent.getAttribute('elementindex'));
    var collectionData = eval(collectionID + '_data');
    if (selectionMode == 1) clearChecks(collectionData);
    if (objectEvent.checked) {
        collectionData[elementIndex][1] = 'true';
    } else {
        collectionData[elementIndex][1] = 'false';
    }
    setEncodedCollection(collectionID);
}

function setEncodedCollection(collectionID) {
    var encodedString = encodeCollection(collectionID);
    // document.getElementById(collectionID).value = encodedString;
    document.getElementById('encodedcollection_' + collectionID).value = encodedString;
}

function clearChecks(collectionData) {
    for (var i in collectionData) {
        collectionData[i][1] = 'false';
    }
}
var MONTH_NAMES = new Array('Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre', 'Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');
var DAY_NAMES = new Array('Domingo', 'Lunes', 'Martes', 'Miercoles', 'Jueves', 'Viernes', 'Sabado', 'Dom', 'Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab');

function LZ(x) {
    return (x < 0 || x > 9 ? "" : "0") + x;
}

function isDate(val, format) {
    var date = getDateFromFormat(val, format);
    if (date == 0) {
        return false;
    }
    return true;
}

function fDates(date1, dateformat1, date2, dateformat2) {
    var d1 = getDateFromFormat(date1, dateformat1);
    var d2 = getDateFromFormat(date2, dateformat2);
    if (d1 == 0 || d2 == 0) {
        return -1;
    } else if (d1 > d2) {
        return 1;
    }
    return 0;
}

function formatDate(date, format) {
    format = format + "";
    var result = "";
    var i_format = 0;
    var c = "";
    var token = "";
    var y = date.getYear() + "";
    var M = date.getMonth() + 1;
    var d = date.getDate();
    var E = date.getDay();
    var H = date.getHours();
    var m = date.getMinutes();
    var s = date.getSeconds();
    var yyyy, yy, MMM, MM, dd, hh, h, mm, ss, ampm, HH, H, KK, K, kk, k;
    var value = new Object();
    if (y.length < 4) {
        y = "" + (y - 0 + 1900);
    }
    value["y"] = "" + y;
    value["yyyy"] = y;
    value["yy"] = y.substring(2, 4);
    value["M"] = M;
    value["MM"] = LZ(M);
    value["MMM"] = MONTH_NAMES[M - 1];
    value["NNN"] = MONTH_NAMES[M + 11];
    value["d"] = d;
    value["dd"] = LZ(d);
    value["E"] = DAY_NAMES[E + 7];
    value["EE"] = DAY_NAMES[E];
    value["H"] = H;
    value["HH"] = LZ(H);
    if (H == 0) {
        value["h"] = 12;
    } else if (H > 12) {
        value["h"] = H - 12;
    } else {
        value["h"] = H;
    }
    value["hh"] = LZ(value["h"]);
    if (H > 11) {
        value["K"] = H - 12;
    } else {
        value["K"] = H;
    }
    value["k"] = H + 1;
    value["KK"] = LZ(value["K"]);
    value["kk"] = LZ(value["k"]);
    if (H > 11) {
        value["a"] = "PM";
    } else {
        value["a"] = "AM";
    }
    value["m"] = m;
    value["mm"] = LZ(m);
    value["s"] = s;
    value["ss"] = LZ(s);
    while (i_format < format.length) {
        c = format.charAt(i_format);
        token = "";
        while ((format.charAt(i_format) == c) && (i_format < format.length)) {
            token += format.charAt(i_format++);
        }
        if (value[token] != null) {
            result = result + value[token];
        } else {
            result = result + token;
        }
    }
    return result;
}

function _isInteger(val) {
    var digits = "1234567890";
    for (var i = 0; i < val.length; i++) {
        if (digits.indexOf(val.charAt(i)) == -1) {
            return false;
        }
    }
    return true;
}

function _getInt(str, i, minlength, maxlength) {
    for (var x = maxlength; x >= minlength; x--) {
        var token = str.substring(i, i + x);
        if (token.length < minlength) {
            return null;
        }
        if (_isInteger(token)) {
            return token;
        }
    }
    return null;
}
//Devuelve los milisegundos transcurridos entre el día 1 de enero de 1970 y la fecha correspondiente al objeto al que se le pasa el mensaje.
function getDateFromFormat(val, format) {
    // Permite al usuario ingresar una fecha de la forma dd-MM-yyyy
    val = val.replace(/-/g, '/') + "";
    // format = format + "";
    format = "dd/MM/yyyy" + "";
    var i_val = 0;
    var i_format = 0;
    var c = "";
    var token = "";
    var token2 = "";
    var x, y;
    var now = new Date();
    var year = 2000;
    var month = 1;
    var date = 1;
    var hh = 0;
    var mm = 0;
    var ss = 0;
    var ampm = "";
    while (i_format < format.length) {
        c = format.charAt(i_format);
        token = "";
        while ((format.charAt(i_format) == c) && (i_format < format.length)) {
            token += format.charAt(i_format++);
        }
        if (token == "yyyy" || token == "yy" || token == "y") {
            if (token == "yyyy") {
                x = 4;
                y = 4;
            }
            if (token == "yy") {
                x = 2;
                y = 2;
            }
            if (token == "y") {
                x = 2;
                y = 4;
            }
            year = _getInt(val, i_val, x, y);
            if (year == null) {
                return 0;
            }
            i_val += year.length;
            if (year.length == 2) {
                if (year > 70) {
                    year = 1900 + (year - 0);
                } else {
                    year = 2000 + (year - 0);
                }
            }
        } else if (token == "MMM" || token == "NNN") {
            month = 0;
            for (var i = 0; i < MONTH_NAMES.length; i++) {
                var month_name = MONTH_NAMES[i];
                if (val.substring(i_val, i_val + month_name.length).toLowerCase() == month_name.toLowerCase()) {
                    if (token == "MMM" || (token == "NNN" && i > 11)) {
                        month = i + 1;
                        if (month > 12) {
                            month -= 12;
                        }
                        i_val += month_name.length;
                        break;
                    }
                }
            }
            if ((month < 1) || (month > 12)) {
                return 0;
            }
        } else if (token == "EE" || token == "E") {
            for (var i = 0; i < DAY_NAMES.length; i++) {
                var day_name = DAY_NAMES[i];
                if (val.substring(i_val, i_val + day_name.length).toLowerCase() == day_name.toLowerCase()) {
                    i_val += day_name.length;
                    break;
                }
            }
        } else if (token == "MM" || token == "M") {
            month = _getInt(val, i_val, token.length, 2);
            if (month == null || (month < 1) || (month > 12)) {
                return 0;
            }
            i_val += month.length;
        } else if (token == "dd" || token == "d") {
            date = _getInt(val, i_val, token.length, 2);
            if (date == null || (date < 1) || (date > 31)) {
                return 0;
            }
            i_val += date.length;
        } else if (token == "hh" || token == "h") {
            hh = _getInt(val, i_val, token.length, 2);
            if (hh == null || (hh < 1) || (hh > 12)) {
                return 0;
            }
            i_val += hh.length;
        } else if (token == "HH" || token == "H") {
            hh = _getInt(val, i_val, token.length, 2);
            if (hh == null || (hh < 0) || (hh > 23)) {
                return 0;
            }
            i_val += hh.length;
        } else if (token == "KK" || token == "K") {
            hh = _getInt(val, i_val, token.length, 2);
            if (hh == null || (hh < 0) || (hh > 11)) {
                return 0;
            }
            i_val += hh.length;
        } else if (token == "kk" || token == "k") {
            hh = _getInt(val, i_val, token.length, 2);
            if (hh == null || (hh < 1) || (hh > 24)) {
                return 0;
            }
            i_val += hh.length;
            hh--;
        } else if (token == "mm" || token == "m") {
            mm = _getInt(val, i_val, token.length, 2);
            if (mm == null || (mm < 0) || (mm > 59)) {
                return 0;
            }
            i_val += mm.length;
        } else if (token == "ss" || token == "s") {
            ss = _getInt(val, i_val, token.length, 2);
            if (ss == null || (ss < 0) || (ss > 59)) {
                return 0;
            }
            i_val += ss.length;
        } else if (token == "a") {
            if (val.substring(i_val, i_val + 2).toLowerCase() == "am") {
                ampm = "AM";
            } else if (val.substring(i_val, i_val + 2).toLowerCase() == "pm") {
                ampm = "PM";
            } else {
                return 0;
            }
            i_val += 2;
        } else {
            if (val.substring(i_val, i_val + token.length) != token) {
                return 0;
            } else {
                i_val += token.length;
            }
        }
    }
    if (i_val != val.length) {
        return 0;
    }
    if (month == 2) {
        if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) {
            if (date > 29) {
                return 0;
            }
        } else if (date > 28) {
            return 0;
        }
    }
    if ((month == 4) || (month == 6) || (month == 9) || (month == 11)) {
        if (date > 30) {
            return 0;
        }
    }
    if (hh < 12 && ampm == "PM") {
        hh = hh - 0 + 12;
    } else if (hh > 11 && ampm == "AM") {
        hh -= 12;
    }
    var newdate = new Date(year, month - 1, date, hh, mm, ss);
    return newdate.getTime();
}

function parseDate(val) {
    var preferEuro = (arguments.length == 2) ? arguments[1] : false;
    generalFormats = new Array('y-M-d', 'MMM d, y', 'MMM d,y', 'y-MMM-d', 'd-MMM-y', 'MMM d');
    monthFirst = new Array('M/d/y', 'M-d-y', 'M.d.y', 'MMM-d', 'M/d', 'M-d');
    dateFirst = new Array('d/M/y', 'd-M-y', 'd.M.y', 'd-MMM', 'd/M', 'd-M');
    var checkList = new Array('generalFormats', preferEuro ? 'dateFirst' : 'monthFirst', preferEuro ? 'monthFirst' : 'dateFirst');
    var d = null;
    for (var i = 0; i < checkList.length; i++) {
        var l = window[checkList[i]];
        for (var j = 0; j < l.length; j++) {
            d = getDateFromFormat(val, l[j]);
            if (d != 0) {
                return new Date(d);
            }
        }
    }
    return null;
}

function updateDateField(dateFieldID) {
    var visibleDateField = document.getElementById(dateFieldID);
    var dateFormat = visibleDateField.getAttribute('dateformat');
    if (isDate(visibleDateField.value, dateFormat)) {
        var dateValue = new Date();
        dateValue.setTime(getDateFromFormat(visibleDateField.value, dateFormat));
        var date = document.getElementById('datefield_' + dateFieldID);
        if (date != null) {
            date.value = formatDate(dateValue, 'yyyyMMddHHmmss');
        }
    }
}
document.getElementsByClassName = function(cl) {
    var retnode = [];
    var myclass = new RegExp('\\b' + cl + '\\b');
    var elem = this.getElementsByTagName('*');
    for (var i = 0; i < elem.length; i++) {
        var classes = elem[i].className;
        if (myclass.test(classes)) retnode.push(elem[i]);
    }
    return retnode;
};
/** ******* */
var fc_ie = false;
if (document.all) {
    fc_ie = true;
}
var calendars = Array();
var iframe = null;
var lastCalendar = null;
var fc_months = Array('Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic');
var fc_openCal;
var fc_calCount = 0;

function getCalendar(fieldId) {
    /*if ( calendars[fieldId].shown ){
	    calendars[fieldId].hide();
	}*/
    return calendars[fieldId];
}

function displayCalendarFor(fieldId) {
    id_toDisplay = fieldId;
    var formElement = fc_getObj(fieldId);
    if (lastCalendar != null) {
        lastCalendar.hide();
    }
    /* if ( iframe != null){

	     //iframe.style.display = 'none';
	     try{
	         document.body.removeChild(iframe);
	     }catch(e){

	     }
	 }*/
    // lastCalendar.hide();
    // }
    displayCalendar(formElement);
}

function displayCalendar(formElement) {
    if (!formElement.id) {
        formElement.id = fc_calCount++;
    }
    var cal = calendars[formElement.id];
    if (typeof(cal) == 'undefined') {
        cal = new floobleCalendar();
        cal.setElement(formElement);
        calendars[formElement.id] = cal;
    }
    if (typeof cal.div != 'undefined') {
        /* if ( cal.div.style.display != null ){

		     if ( cal.div.style.display == 'none' || cal.div.style.display == 'block'){

		         cal.hide();
		     }
		 }*/
    }
    lastCalendar = cal;
    if (cal.shown) {
        cal.hide();
    } else {
        cal.show();
    }
}

function display3FieldCalendar(me, de, ye) {
    if (!me.id) {
        me.id = fc_calCount++;
    }
    if (!de.id) {
        de.id = fc_calCount++;
    }
    if (!ye.id) {
        ye.id = fc_calCount++;
    }
    var id = me.id + '-' + de.id + '-' + ye.id;
    var cal = calendars[id];
    if (typeof(cal) == 'undefined') {
        cal = new floobleCalendar();
        cal.setElements(me, de, ye);
        calendars[id] = cal;
    }
    if (cal.shown) {
        cal.hide();
    } else {
        cal.show();
    }
}
// --Class Stuff--------------------------------------------------
function floobleCalendar() {
    // Define Methods
    this.setElement = fc_setElement;
    this.setElements = fc_setElements;
    this.parseDate = fc_parseDate;
    this.generateHTML = fc_generateHTML;
    this.generateDaysHtml = fc_generateDaysHtml;
    this.generateDaysBetweenSomeMonth = fc_generateDaysBetweenSomeMonth;
    this.show = fc_show;
    this.hide = fc_hide;
    this.moveMonth = fc_moveMonth;
    this.setDate = fc_setDate;
    this.formatDate = fc_formatDate;
    this.setDateFields = fc_setDateFields;
    this.parseDateFields = fc_parseDateFields;
    this.shown = false;
}

function fc_setElement(formElement) {
    this.element = formElement;
    this.format = this.element.title;
    this.value = this.element.value;
    this.id = this.element.id;
    this.mode = 1;
}

function fc_setElements(monthElement, dayElement, yearElement) {
    this.mElement = monthElement;
    this.dElement = dayElement;
    this.yElement = yearElement;
    this.id = this.mElement.id + '-' + this.dElement.id + '-' + this.yElement.id;
    this.element = this.mElement;
    if (fc_absoluteOffsetLeft(this.dElement) < fc_absoluteOffsetLeft(this.element)) {
        this.element = this.dElement;
    }
    if (fc_absoluteOffsetLeft(this.yElement) < fc_absoluteOffsetLeft(this.element)) {
        this.element = this.yElement;
    }
    if (fc_absoluteOffsetTop(this.mElement) > fc_absoluteOffsetTop(this.element)) {
        this.element = this.mElement;
    }
    if (fc_absoluteOffsetTop(this.dElement) > fc_absoluteOffsetTop(this.element)) {
        this.element = this.dElement;
    }
    if (fc_absoluteOffsetTop(this.yElement) > fc_absoluteOffsetTop(this.element)) {
        this.element = this.yElement;
    }
    this.mode = 2;
}

function fc_parseDate() {
    if (this.element.value) {
        this.date = new Date();
        var out = '';
        var token = '';
        var lastCh, ch;
        var start = 0;
        lastCh = this.format.substring(0, 1);
        for (var i = 0; i < this.format.length; i++) {
            ch = this.format.substring(i, i + 1);
            if (ch == lastCh) {
                token += ch;
            } else {
                fc_parseToken(this.date, token, this.element.value, start);
                start += token.length;
                token = ch;
            }
            lastCh = ch;
        }
        fc_parseToken(this.date, token, this.element.value, start);
    } else {
        this.date = new Date();
    }
    if ('' + this.date.getMonth() == 'NaN') {
        this.date = new Date();
    }
}

function fc_parseDateFields() {
    this.date = new Date();
    if (this.mElement.value) this.date.setMonth(fc_getFieldValue(this.mElement) - 1);
    if (this.dElement.value) this.date.setDate(fc_getFieldValue(this.dElement));
    if (this.yElement.value) this.date.setFullYear(fc_getFieldValue(this.yElement));
    if ('' + this.date.getMonth() == 'NaN') {
        this.date = new Date();
    }
}

function fc_setDate(d, m, y) {
    this.date.setYear(y);
    this.date.setMonth(m);
    this.date.setDate(d);
    if (this.mode == 1) {
        // this.element.value = this.formatDate();
        document.getElementById(id_toDisplay).value = this.formatDate();
    } else {
        this.setDateFields();
    }
    this.hide();
}

function fc_setDateFields() {
    fc_setFieldValue(this.mElement, fc_zeroPad(this.date.getMonth() + 1));
    fc_setFieldValue(this.dElement, fc_zeroPad(this.date.getDate()));
    fc_setFieldValue(this.yElement, this.date.getFullYear());
}

function fc_formatDate() {
    var out = '';
    var token = '';
    var lastCh, ch;
    lastCh = this.format.substring(0, 1);
    for (var i = 0; i < this.format.length; i++) {
        ch = this.format.substring(i, i + 1);
        if (ch == lastCh) {
            token += ch;
        } else {
            out += fc_formatToken(this.date, token);
            token = ch;
        }
        lastCh = ch;
    }
    out += fc_formatToken(this.date, token);
    return out;
}

function fc_show() {
    var rev;
    var lim;
    var bsm = false;
    if (typeof(fc_openCal) != 'undefined') {
        fc_openCal.hide();
    }
    if (this.mode == 1) {
        this.parseDate();
    } else {
        this.parseDateFields();
    }
    var inputDate = document.getElementById(id_toDisplay);
    var resb = this.element.attributes.resb;
    var dc;
    //se usan para tener el valor de la fecha a comparar con el formato dd/mm/aaaa, para dps generar el calendario
    var fecha = null;
    var fechaDown = null;
    var fechaTop = null;
    // Valida si la fecha tipeada esta por fuera del rango
    var isInputDateOutRange = true;
    if (inputDate.value != null && inputDate.value != "") {
        isInputDateOutRange = validateInputDateRange(inputDate.value, this.element.attributes);
    }
    if (inputDate.value != null && inputDate.value != "" && !isInputDateOutRange) {
        if (isDate(inputDate.value, "dd/MM/yyyy")) {
            var top = this.element.attributes.top;
            var down = this.element.attributes.down;
            if (top != null && down != null) {
                var ttp = top.nodeValue;
                var dtp = down.nodeValue;
                bsm = betweenSameMonth(dtp, ttp);
            }
            this.showDate = new Date(getDateFromFormat(inputDate.value, "dd/MM/yyyy"));
        } else {
            showError(traducir("Fecha no valida."));
            this.date = new Date();
            this.showDate = new Date(this.date.getTime());
        }
    } else {
        if (this.element.attributes.rest != undefined) {
            if (this.element.attributes.defd == undefined) {
                var typ = this.element.attributes.rest.nodeValue;
                var myd = new Date(this.date.getTime());
                if (typ == 'less' || typ == 'more' || typ == 'lessOrEqual' || typ == 'moreOrEqual') {
                    lim = true;
                    var dtp = this.element.attributes.date.nodeValue;
                    // me fijo si el valor es el id de otro coponente
                    if (resb.nodeValue == 'idRadio') {
                        dtp = getValueOfAnotherDateComponent(dtp);
                    }
                    fecha = dtp;
                    if (dtp == 'vacio') this.showDate = new Date(this.date.getTime());
                    else {
                        var dc = getDateFromFormat(dtp, "dd/MM/yyyy");
                        this.showDate = new Date(dc);
                    }
                    if (typ == 'less') {
                        rev = false;
                        if (fecha != null && fecha != 'vacio') { //resto un dia
                            var miliFecha = dc - 86400000;
                            fecha = formatDate(new Date(miliFecha), "dd/MM/yyyy");
                        }
                    }
                    if (typ == 'lessOrEqual') {
                        rev = false;
                    }
                    if (typ == 'more') {
                        rev = true;
                        if (fecha != null && fecha != 'vacio') { //sumo un dia
                            var miliFecha = dc + 86400000;
                            fecha = formatDate(new Date(miliFecha), "dd/MM/yyyy");
                        }
                    }
                    if (typ == 'moreOrEqual') {
                        rev = true;
                    }
                } else {
                    var top = this.element.attributes.top;
                    var down = this.element.attributes.down;
                    if (top != null && down != null) {
                        var ttp = top.nodeValue;
                        var dtp = down.nodeValue;
                        // me fijo si el valor es el id de otro coponente
                        if (resb.nodeValue == 'idRadio') {
                            var topId = ttp;
                            ttp = null;
                            if (topId != null) {
                                var elemTop = document.getElementById(topId);
                                if (elemTop != null) ttp = elemTop.value;
                            }
                            var downId = dtp;
                            dtp = null;
                            if (downId != null) {
                                var elemDown = document.getElementById(downId);
                                if (elemDown != null) dtp = elemDown.value;
                            }
                        }
                        fechaTop = ttp;
                        fechaDown = dtp;
                        bsm = betweenSameMonth(dtp, ttp);
                        var dc = getDateFromFormat(dtp, "dd/MM/yyyy");
                        this.showDate = new Date(dc);
                    }
                }
            } else {
                var dtp = this.element.attributes.defd.nodeValue;
                var dc = getDateFromFormat(dtp, "dd/MM/yyyy");
                this.showDate = new Date(dc);
            }
        } else {
            this.showDate = new Date(this.date.getTime());
        }
    }
    if (typeof(this.div) != 'undefined') {
        try {
            document.body.removeChild(iframe);
        } catch (e) {}
        if (lim) {
            var da = fecha;
            this.div.innerHTML = this.generateDaysHtml(rev, da.substring(0, 2), new Date(getDateFromFormat(da, "dd/MM/yyyy")));
        } else if (bsm) {
            this.div.innerHTML = this.generateDaysBetweenSomeMonth(fechaDown.substring(0, 2), fechaTop.substring(0, 2));
        } else {
            this.div.innerHTML = this.generateHTML();
        }
    }
    if (typeof(this.div) == 'undefined') {
        this.div = document.createElement('DIV');
        this.div.style.position = 'absolute';
        this.div.style.zIndex = '99';
        this.div.style.display = 'none';
        this.div.className = 'fc_main';
        if (lim) {
            var da = fecha;
            this.div.innerHTML = this.generateDaysHtml(rev, da.substring(0, 2), new Date(getDateFromFormat(da, "dd/MM/yyyy")));
        } else if (bsm) {
            this.div.innerHTML = this.generateDaysBetweenSomeMonth(fechaDown.substring(0, 2), fechaTop.substring(0, 2));
        } else {
            this.div.innerHTML = this.generateHTML();
        }
        this.div.style.left = fc_absoluteOffsetLeft(this.element);
        this.div.style.top = fc_absoluteOffsetTop(this.element) + this.element.offsetHeight + 1;
        document.body.appendChild(this.div);
    }
    if (!isIE) {
        document.getElementById(id_toDisplay).parentNode.appendChild(this.div);
    }
    this.div.style.display = 'block';
    this.shown = true;
    fc_openCal = this;
    showIframe(this);
}

function getValueOfAnotherDateComponent(dateElem) {
    var dateId = dateElem;
    dateElem = null;
    if (dateId != null) {
        var elemDate = document.getElementById(dateId);
        if (elemDate != null) dateElem = elemDate.value;
    }
    if (dateElem == null || dateElem == '') return "vacio";
    return dateElem;
}
//input es el valor ingresado; attributes son los atributos del componente el cual se esta tratando
function validateInputDateRange(input, attributes) {
    var inputDate = input;
    var downDate = attributes.down;
    var topDate = attributes.top;
    var rest = attributes.rest;
    var resb = attributes.resb;
    var date = attributes.date;
    var inputDate = inputDate.split('/');
    inputDate = new Date(inputDate[2], Number(inputDate[1]) - 1, inputDate[0]);
    if (downDate != null && topDate != null) {
        var fechaDownDate = downDate;
        var fechaTopDate = topDate;
        // si busco las fechas en otros campos
        if (resb != null && resb.nodeValue == 'idRadio') {
            var downId = fechaDownDate;
            if (downId != null) {
                var elemDown = document.getElementById(downId);
                if (elemDown != null) fechaDownDate = elemDown.value;
            }
            var topId = fechaTopDate;
            if (topId != null) {
                var elemTop = document.getElementById(topId);
                if (elemTop != null) fechaTopDate = elemTop.value;
            }
        }
        if (fechaDownDate != null) {
            fechaDownDate = fechaDownDate.split('/');
            fechaDownDate = new Date(fechaDownDate[2], Number(fechaDownDate[1]) - 1, fechaDownDate[0]);
            if (inputDate < fechaDownDate) {
                return true;
            }
        }
        if (fechaTopDate != null) {
            fechaTopDate = fechaTopDate.split('/');
            fechaTopDate = new Date(fechaTopDate[2], Number(fechaTopDate[1]) - 1, fechaTopDate[0]);
            if (inputDate > fechaTopDate) {
                return true;
            }
        }
    }
    if (rest != null) {
        typ = rest.nodeValue;
        if (typ != null && typ != 'entre') {
            var fecha = date.nodeValue;
            // si busco las fechas en otros campos
            if (resb.nodeValue == 'idRadio') {
                var dateId = fecha;
                if (dateId != null) {
                    var elemDate = document.getElementById(dateId);
                    if (elemDate != null) fecha = elemDate.value;
                }
            }
            fecha = fecha.split('/');
            fecha = new Date(fecha[2], Number(fecha[1]) - 1, fecha[0]);
            if (typ == 'less') {
                if (inputDate > fecha) {
                    return true;
                }
            }
            if (typ == 'lessOrEqual') {
                if (inputDate >= fecha) {
                    return true;
                }
            }
            if (typ == 'more') {
                if (inputDate < fecha) {
                    return true;
                }
            }
            if (typ == 'moreOrEqual') {
                if (inputDate <= fecha) {
                    return true;
                }
            }
        }
    }
    return false;
}

function betweenSameMonth(dtp, ttp) {
    if (dtp == null || ttp == null) return false;
    var dm = dtp.substring(3, 5);
    var dy = dtp.substring(6, 10);
    var tm = ttp.substring(3, 5);
    var ty = ttp.substring(6, 10);
    if (dm == tm && dy == ty) {
        return true;
    }
    return false;
}

function showIframe(obj) {
    // iframe.style.display = 'none';
    try {
        document.body.removeChild(iframe);
    } catch (e) {}
    iframe = document.createElement('IFRAME');
    iframe.className = "iframeClass";
    iframe.setAttribute("src", "");
    iframe.setAttribute("scrolling", "no");
    iframe.setAttribute("frameborder", "0");
    iframe.style.position = 'absolute';
    iframe.style.width = '160px';
    iframe.style.height = '135px';
    iframe.style.zIndex = "90";
    iframe.style.backgroundColor = 'transparent';
    var left = fc_absoluteOffsetLeft(obj.element);
    var top = fc_absoluteOffsetTop(obj.element) + obj.element.offsetHeight + 1;
    iframe.style.left = left + 'px';
    iframe.style.top = top + 'px';
    iframe.style.display = 'block';
    document.body.appendChild(iframe);
}

function cerrar(table) {
    table.parentNode.style.display = 'none';
    if (iframe != null) {
        iframe.style.display = 'none';
    }
    // t.style.display = 'none';
    /*
	//iframe.style.display = 'none';
	try{
	     document.body.removeChild(iframe);
	}catch(e){

	}
	 */
}

function mostrar(table) {
    if (iframe != null) {
        iframe.style.display = 'block';
    }
    table.parentNode.style.display = 'block';
    // t.style.display = 'block';
    // iframe.style.display = 'block';
}

function fc_generateHTML() {
    var html = '<TABLE onmouseover=\"mostrar(this);\" onmouseout=\"cerrar(this);\"><TR><TD CLASS="fc_head" COLSPAN="6"><DIV STYLE="float: right"></DIV>CALENDARIO:</TD><TD CLASS="fc_date" onMouseover="this.className = \'fc_dateHover\';" onMouseout="this.className=\'fc_date\';" onClick="getCalendar(\'' + this.id + '\').hide();"><B>X</B></TD></TR>';
    html += '<TR><TD CLASS="fc_date" onMouseover="this.className = \'fc_dateHover\';" onMouseout="this.className=\'fc_date\';" onClick="getCalendar(\'' + this.id + '\').moveMonth(-12);"><B><<</B></TD><TD CLASS="fc_date" onMouseover="this.className = \'fc_dateHover\';" onMouseout="this.className=\'fc_date\';" onClick="getCalendar(\'' + this.id + '\').moveMonth(-1);"><B><</B></TD><TD COLSPAN="3" CLASS="fc_wk">' + fc_months[this.showDate.getMonth()] + ' ' + fc_getYear(this.showDate) + '</TD><TD CLASS="fc_date" onMouseover="this.className = \'fc_dateHover\';" onMouseout="this.className=\'fc_date\';" onClick="getCalendar(\'' + this.id + '\').moveMonth(1);"><B>></B></TD><TD CLASS="fc_date" onMouseover="this.className = \'fc_dateHover\';" onMouseout="this.className=\'fc_date\';" onClick="getCalendar(\'' + this.id + '\').moveMonth(12);"><B>>></B></TD></TR>';
    html += '<TR><TD WIDTH="14%" CLASS="fc_wk">Lu</TD><TD WIDTH="14%" CLASS="fc_wk">Ma</TD><TD WIDTH="14%" CLASS="fc_wk">Mi</TD><TD WIDTH="14%" CLASS="fc_wk">Ju</TD><TD WIDTH="14%" CLASS="fc_wk">Vi</TD><TD class="fc_wknd" WIDTH="14%">Sa</TD><TD class="fc_wknd" WIDTH="14%">Do</TD></TR>';
    html += '<TR>';
    var dow = 0;
    var i, style;
    var totald = fc_monthLength(this.showDate);
    for (i = 0; i < fc_firstDOW(this.showDate); i++) {
        dow++;
        html += '<TD> </TD>';
    }
    for (i = 1; i <= totald; i++) {
        if (dow == 0) {
            html += '<TR>';
        }
        if (this.showDate.getMonth() == this.date.getMonth() && this.showDate.getYear() == this.date.getYear() && this.date.getDate() == i) {
            style = ' style="font-weight: bold;"';
        } else {
            style = '';
        }
        html += '<TD CLASS="fc_date" onMouseover="this.className = \'fc_dateHover\';" onMouseout="this.className=\'fc_date\';" onClick="getCalendar(\'' + this.id + '\').setDate(' + i + ', ' + this.showDate.getMonth() + ', ' + this.showDate.getFullYear() + ');" ' + style + '>' + i + '</TD>';
        dow++;
        if (dow == 7) {
            html += '</TR>';
            dow = 0;
        }
    }
    if (dow != 0) {
        for (i = dow; i < 7; i++) {
            html += '<TD> </TD>';
        }
    }
    html += '</TR>';
    html += '</TABLE>';
    return html;
}

function fc_generateDaysBetweenSomeMonth(dtp, ttp) {
    var html = '<TABLE onmouseover=\"mostrar(this);\" onmouseout=\"cerrar(this);\"><TR><TD CLASS="fc_head" COLSPAN="6"><DIV STYLE="float: right"></DIV>CALENDARIO:</TD><TD CLASS="fc_date" onMouseover="this.className = \'fc_dateHover\';" onMouseout="this.className=\'fc_date\';" onClick="getCalendar(\'' + this.id + '\').hide();"><B>X</B></TD></TR>';
    html += '<TR><TD CLASS="fc_date" onMouseover="this.className = \'fc_dateHover\';" onMouseout="this.className=\'fc_date\';" onClick="getCalendar(\'' + this.id + '\').moveMonth(-12);"><B><<</B></TD><TD CLASS="fc_date" onMouseover="this.className = \'fc_dateHover\';" onMouseout="this.className=\'fc_date\';" onClick="getCalendar(\'' + this.id + '\').moveMonth(-1);"><B><</B></TD><TD COLSPAN="3" CLASS="fc_wk">' + fc_months[this.showDate.getMonth()] + ' ' + fc_getYear(this.showDate) + '</TD><TD CLASS="fc_date" onMouseover="this.className = \'fc_dateHover\';" onMouseout="this.className=\'fc_date\';" onClick="getCalendar(\'' + this.id + '\').moveMonth(1);"><B>></B></TD><TD CLASS="fc_date" onMouseover="this.className = \'fc_dateHover\';" onMouseout="this.className=\'fc_date\';" onClick="getCalendar(\'' + this.id + '\').moveMonth(12);"><B>>></B></TD></TR>';
    html += '<TR><TD WIDTH="14%" CLASS="fc_wk">Lu</TD><TD WIDTH="14%" CLASS="fc_wk">Ma</TD><TD WIDTH="14%" CLASS="fc_wk">Mi</TD><TD WIDTH="14%" CLASS="fc_wk">Ju</TD><TD WIDTH="14%" CLASS="fc_wk">Vi</TD><TD class="fc_wknd" WIDTH="14%">Sa</TD><TD class="fc_wknd" WIDTH="14%">Do</TD></TR>';
    html += '<TR>';
    var dow = 0;
    var i, style;
    for (i = 0; i < fc_firstDOW(this.showDate); i++) {
        dow++;
        html += '<TD> </TD>';
    }
    for (i = dtp; i <= ttp; i++) {
        if (dow == 0) {
            html += '<TR>';
        }
        if (this.showDate.getMonth() == this.date.getMonth() && this.showDate.getYear() == this.date.getYear() && this.date.getDate() == i) {
            style = ' style="font-weight: bold;"';
        } else {
            style = '';
        }
        html += '<TD CLASS="fc_date" onMouseover="this.className = \'fc_dateHover\';" onMouseout="this.className=\'fc_date\';" onClick="getCalendar(\'' + this.id + '\').setDate(' + i + ', ' + this.showDate.getMonth() + ', ' + this.showDate.getFullYear() + ');" ' + style + '>' + i + '</TD>';
        dow++;
        if (dow == 7) {
            html += '</TR>';
            dow = 0;
        }
    }
    if (dow != 0) {
        for (i = dow; i < 7; i++) {
            html += '<TD> </TD>';
        }
    }
    html += '</TR>';
    html += '</TABLE>';
    return html;
}
/**
 * Genera el calendario al presionar el boton
 * */
function fc_generateDaysHtml(reverse, totald, date) {
    var html = '<TABLE onmouseover=\"mostrar(this);\" onmouseout=\"cerrar(this);\"><TR><TD CLASS="fc_head" COLSPAN="6"><DIV STYLE="float: right"></DIV>CALENDARIO:</TD><TD CLASS="fc_date" onMouseover="this.className = \'fc_dateHover\';" onMouseout="this.className=\'fc_date\';" onClick="getCalendar(\'' + this.id + '\').hide();"><B>X</B></TD></TR>';
    html += '<TR><TD CLASS="fc_date" onMouseover="this.className = \'fc_dateHover\';" onMouseout="this.className=\'fc_date\';" onClick="getCalendar(\'' + this.id + '\').moveMonth(-12);"><B><<</B></TD><TD CLASS="fc_date" onMouseover="this.className = \'fc_dateHover\';" onMouseout="this.className=\'fc_date\';" onClick="getCalendar(\'' + this.id + '\').moveMonth(-1);"><B><</B></TD><TD COLSPAN="3" CLASS="fc_wk">' + fc_months[this.showDate.getMonth()] + ' ' + fc_getYear(this.showDate) + '</TD><TD CLASS="fc_date" onMouseover="this.className = \'fc_dateHover\';" onMouseout="this.className=\'fc_date\';" onClick="getCalendar(\'' + this.id + '\').moveMonth(1);"><B>></B></TD><TD CLASS="fc_date" onMouseover="this.className = \'fc_dateHover\';" onMouseout="this.className=\'fc_date\';" onClick="getCalendar(\'' + this.id + '\').moveMonth(12);"><B>>></B></TD></TR>';
    html += '<TR><TD WIDTH="14%" CLASS="fc_wk">Lu</TD><TD WIDTH="14%" CLASS="fc_wk">Ma</TD><TD WIDTH="14%" CLASS="fc_wk">Mi</TD><TD WIDTH="14%" CLASS="fc_wk">Ju</TD><TD WIDTH="14%" CLASS="fc_wk">Vi</TD><TD class="fc_wknd" WIDTH="14%">Sa</TD><TD class="fc_wknd" WIDTH="14%">Do</TD></TR>';
    html += '<TR>';
    var dow = 0;
    var i, style;
    // var totald = fc_monthLength(this.showDate);
    for (i = 0; i < fc_firstDOW(this.showDate); i++) {
        dow++;
        html += '<TD> </TD>';
    }
    // quiere decir que el valor contra el cual quiero comparar es vacio,
    // entonces muestro todo el calendario, ya que no puede hacer un rango
    var isEmpty = false;
    if (totald == 'va') {
        isEmpty = true;
        date = new Date(this.date.getTime());
    }
    var beg;
    var end;
    if (reverse) {
        if (isEmpty) beg = 1;
        else beg = totald;
        end = fc_monthLength(date);
    } else {
        beg = 1;
        if (isEmpty) end = fc_monthLength(date);
        else end = totald;
    }
    for (i = beg; i <= end; i++) {
        // for (i = 1; i <= totald; i++) {
        if (dow == 0) {
            html += '<TR>';
        }
        if (this.showDate.getMonth() == this.date.getMonth() && this.showDate.getYear() == this.date.getYear() && this.date.getDate() == i) {
            style = ' style="font-weight: bold;"';
        } else {
            style = '';
        }
        html += '<TD CLASS="fc_date" onMouseover="this.className = \'fc_dateHover\';" onMouseout="this.className=\'fc_date\';" onClick="getCalendar(\'' + this.id + '\').setDate(' + i + ', ' + this.showDate.getMonth() + ', ' + this.showDate.getFullYear() + ');" ' + style + '>' + i + '</TD>';
        dow++;
        if (dow == 7) {
            html += '</TR>';
            dow = 0;
        }
    }
    if (dow != 0) {
        for (i = dow; i < 7; i++) {
            html += '<TD> </TD>';
        }
    }
    html += '</TR>';
    html += '</TABLE>';
    return html;
}

function fc_hide() {
    if (this.div != null && this.div != false) {
        this.div.style.display = 'none';
    }
    this.shown = false;
    fc_openCal = undefined;
}

function valRestrictedDate(calendario, year, month) {
    var elemento = calendario.element;
    var typerest = elemento.attributes.rest.nodeValue;
    if (typerest == 'less' || typerest == 'lessOrEqual') {
        var down = elemento.attributes.date.nodeValue;
        var downConvert = getDateFromFormat(down, "dd/MM/yyyy");
        var downDate = new Date(downConvert);
        return compareByTopRestriction(year, month, downDate);
    } else if (typerest == 'more' || typerest == 'moreOrEqual') {
        var down = elemento.attributes.date.nodeValue;
        var downConvert = getDateFromFormat(down, "dd/MM/yyyy");
        var downDate = new Date(downConvert);
        return compareByDownRestriction(year, month, downDate);
    } else {
        var downnode = elemento.attributes.down.nodeValue;
        var downNodeConvert = getDateFromFormat(downnode, "dd/MM/yyyy");
        var downNodeDate = new Date(downNodeConvert);
        var d = compareByDownRestriction(year, month, downNodeDate);
        var topnode = elemento.attributes.top.nodeValue;
        var topNodeConvert = getDateFromFormat(topnode, "dd/MM/yyyy");
        var topNodeDate = new Date(topNodeConvert);
        var t = compareByTopRestriction(year, month, topNodeDate);
        if (d != t) {
            if (d == 1) {
                return 3;
            } else if (t == 1) {
                return 4;
            } else if (t == -1 || d == -1) {
                return -1;
            }
            return 0;
        } else {
            return d;
        }
        /*if ( d ==  t  && d != 1 && t != 1 ){
			return d;
		}else if (d == 1){
			return 3;
		}else if ( t == 1){
			return 4;
		} */
    }
    /*




	return compareByDownRestriction(year, month, downDate);
	 */
}

function compareByTopRestriction(a1, m1, dr) {
    var ar = dr.getFullYear();
    var mr = dr.getMonth() + 1;
    if (a1 == ar) {
        if (m1 == mr) {
            return 1;
        } else if (m1 < mr) {
            return 0;
        } else {
            return -1;
        }
    } else if (a1 > ar) {
        return -1;
    } else {
        return 0;
    }
}

function compareByDownRestriction(a1, m1, dr) {
    var ar = dr.getFullYear();
    var mr = dr.getMonth() + 1;
    if (a1 == ar) {
        if (m1 == mr) {
            return 1;
        } else if (m1 > mr) {
            return 0;
        } else {
            return -1;
        }
    } else if (a1 < ar) {
        return -1;
    } else {
        return 0;
    }
}

function fc_moveMonth(amount) {
    var m = this.showDate.getMonth();
    var y = fc_getYear(this.showDate);
    var restrict = this.element.attributes.rest != undefined;
    var r;
    if (amount == 1) {
        if (m == 11) {
            if (restrict) {
                r = valRestrictedDate(this, y + 1, 1);
                if (r == -1) return;
            }
            this.showDate.setMonth(0);
            this.showDate.setYear(y + 1);
        } else {
            if (restrict) {
                r = valRestrictedDate(this, y, m + 2);
                if (r == -1) return;
            }
            // valRestrictedDate(this, y, m+1);
            this.showDate.setMonth(m + 1);
        }
    } else if (amount == -1) {
        if (m == 0) {
            if (restrict) {
                r = valRestrictedDate(this, y - 1, 12);
                if (r == -1) return;
            }
            this.showDate.setMonth(11);
            this.showDate.setYear(y - 1);
        } else {
            if (restrict) {
                r = valRestrictedDate(this, y, m);
                if (r == -1) return;
            }
            this.showDate.setMonth(m - 1);
        }
    } else if (amount == 12) {
        if (restrict) {
            r = valRestrictedDate(this, y + 1, m + 1);
            if (r == -1) return;
        }
        this.showDate.setYear(y + 1);
    } else if (amount == -12) {
        if (restrict) {
            r = valRestrictedDate(this, y - 1, m + 1);
            if (r == -1) return;
        }
        this.showDate.setYear(y - 1);
    }
    if (restrict && r == 1) {
        var dat = this.element.attributes.date.nodeValue;
        var rever;
        if (this.element.attributes.rest.nodeValue == 'less') {
            rever = false;
        } else {
            rever = true;
        }
        this.div.innerHTML = this.generateDaysHtml(rever, dat.substring(0, 2), new Date(getDateFromFormat(dat, "dd/MM/yyyy")));
    } else if (restrict && r == 3) {
        var dat = this.element.attributes.down.nodeValue;
        this.div.innerHTML = this.generateDaysHtml(true, dat.substring(0, 2), new Date(getDateFromFormat(dat, "dd/MM/yyyy")));
    } else if (restrict && r == 4) {
        var dat = this.element.attributes.top.nodeValue;
        this.div.innerHTML = this.generateDaysHtml(false, dat.substring(0, 2), new Date(getDateFromFormat(dat, "dd/MM/yyyy")));
    } else {
        this.div.innerHTML = this.generateHTML();
    }
}
// --Utils-------------------------------------------------------------
function fc_absoluteOffsetTop(obj) {
    var top = obj.offsetTop;
    var parent = obj.offsetParent;
    var salir = false;
    while (parent != document.body && !salir) {
        top += parent.offsetTop;
        parent = parent.offsetParent;
        if (parent == null) {
            salir = true;
        }
    }
    return top;
}

function fc_absoluteOffsetLeft(obj) {
    var left = obj.offsetLeft;
    var parent = obj.offsetParent;
    var salir = false;
    while (parent != document.body && !salir) {
        left += parent.offsetLeft;
        parent = parent.offsetParent;
        if (parent == null) {
            salir = true;
        }
    }
    return left;
}

function fc_firstDOW(date) {
    var dow = date.getDay();
    var day = date.getDate();
    if (day % 7 == 0) return dow;
    return (7 + dow - (day % 7)) % 7;
}

function fc_getYear(date) {
    var y = date.getYear();
    if (y > 1900) return y;
    return 1900 + y;
}

function fc_monthLength(date) {
    var month = date.getMonth();
    var totald = 30;
    if (month == 0 || month == 2 || month == 4 || month == 6 || month == 7 || month == 9 || month == 11) totald = 31;
    if (month == 1) {
        var year = date.getYear();
        if (year % 4 == 0 && (year % 400 == 0 || year % 100 != 0)) totald = 29;
        else totald = 28;
    }
    return totald;
}

function fc_formatToken(date, token) {
    var command = token.substring(0, 1);
    if (command == 'y' || command == 'Y') {
        if (token.length == 2) {
            return fc_zeroPad(date.getFullYear() % 100);
        }
        if (token.length == 4) {
            return date.getFullYear();
        }
    }
    if (command == 'd' || command == 'D') {
        if (token.length == 2) {
            return fc_zeroPad(date.getDate());
        }
    }
    if (command == 'm' || command == 'M') {
        if (token.length == 2) {
            return fc_zeroPad(date.getMonth() + 1);
        }
        if (token.length == 3) {
            return fc_months[date.getMonth()];
        }
    }
    return token;
}

function fc_parseToken(date, token, value, start) {
    var command = token.substring(0, 1);
    var v;
    if (command == 'y' || command == 'Y') {
        if (token.length == 2) {
            v = value.substring(start, start + 2);
            if (v < 70) {
                date.setFullYear(2000 + parseInt(v));
            } else {
                date.setFullYear(1900 + parseInt(v));
            }
        }
        if (token.length == 4) {
            v = value.substring(start, start + 4);
            date.setFullYear(v);
        }
    }
    if (command == 'd' || command == 'D') {
        if (token.length == 2) {
            v = value.substring(start, start + 2);
            date.setDate(v);
        }
    }
    if (command == 'm' || command == 'M') {
        if (token.length == 2) {
            v = value.substring(start, start + 2);
            date.setMonth(v - 1);
        }
        if (token.length == 3) {
            v = value.substring(start, start + 3);
            var i;
            for (i = 0; i < fc_months.length; i++) {
                if (fc_months[i].toUpperCase() == v.toUpperCase()) {
                    date.setMonth(i);
                }
            }
        }
    }
}

function fc_zeroPad(num) {
    if (num < 10) {
        return '0' + num;
    }
    return num;
}

function fc_getObj(id) {
    if (fc_ie) {
        return document.all[id];
    } else {
        return document.getElementById(id);
    }
}

function fc_setFieldValue(field, value) {
    if (field.type.substring(0, 6) == 'select') {
        var i;
        for (i = 0; i < field.options.length; i++) {
            if (fc_equals(field.options[i].value, value)) {
                field.selectedIndex = i;
            }
        }
    } else {
        field.value = value;
    }
}

function fc_getFieldValue(field) {
    if (field.type.substring(0, 6) == 'select') {
        return field.options[field.selectedIndex].value;
    } else {
        return field.value;
    }
}

function fc_equals(val1, val2) {
    if (val1 == val2) return true;
    if (1 * val1 == 1 * val2) return true;
    return false;
}
/*
function checkMvun(){

	un = getcoo


}

 */
function getCookieName(c_name) {
    if (document.cookie.length > 0) {
        c_start = document.cookie.indexOf(c_name + "=");
        if (c_start != -1) {
            c_start = c_start + c_name.length + 1
            c_end = document.cookie.indexOf(";", c_start)
            if (c_end == -1) c_end = document.cookie.length
            return unescape(document.cookie.substring(c_start, c_end))
        }
    }
    return ""
}

function getUserName() {
    username = getCookieName('username')
    document.getElementById("user_id").value = username;
}

function setCookieName(name, value, expireDays) {
    var exdate = new Date();
    exdate.setDate(exdate.getDate() + expireDays);
    document.cookie = name + "=" + escape(value) + ((expireDays == null) ? "" : "; expires=" + exdate.toUTCString());
}

function leerCookie(nombre) {
    var i;
    var a = document.cookie.split(";");
    var n, v;
    var pos;
    for (i = 0; i < a.length; i++) {
        var cookie = trim(a[i]);
        pos = cookie.indexOf("=");
        n = cookie.substring(0, pos);
        if (n == nombre) {
            return unescape(cookie.substring(1 + pos, cookie.length));
        }
    }
    return null;
}

function sizeCollection(cole) {
    var k = 0;
    for (var key in cole) {
        k += 1;
    }
    return k;
}
var validateMultiEnter = false;
var skeepEnter = false;

function submitenter(myfield, e) {
    var keycode;
    var ejecutado = false;
    if (window.event) keycode = window.event.keyCode;
    else if (e) keycode = e.which;
    else return true;
    if (keycode == 13 && ejecutoEnterEnIrA != 1) {
        /* VIEW-1413 (start) */
        if (validateMultiEnter) {
            if (skeepEnter) {
                pararPropagacionEvento(e);
                return true;
            }
            skeepEnter = true;
        }
        /* VIEW-1413 (end) */
        var botones = $('button[class^="action-button"][default="true"]');
        if (botones != "") {
            if (botones != null) {
                for (i = 0;
                     (i < botones.length) && !ejecutado; i++) {
                    botones[i].focus();
                    botones[i].click();
                    botones[i].blur();
                    // Revisar el caso de ejecucion en modal
                    /*
                     * $('#modalWindow').jqmHide(); $("#" +
                     * myfield.id).trigger('blur');
                     * submitFormByAjax(getDocumentIDForm(), botones[i].id);
                     */
                    ejecutado = true;
                }
                // Revisar el caso de ejecucion en modal
                /*
                 * if (!ejecutado) {
                 *
                 * /*$('#modalWindow').jqmHide(); $("#" +
                 * myfield.id).trigger('blur');
                 * submitFormByAjax(getDocumentIDForm(), botones[0].id, true); }
                 */
            }
        }
        pararPropagacionEvento(e);
        return false;
    } else {
        ejecutoEnterEnIrA = 0;
        return true;
    }
}

function closeCalendars() {
    calendars = Array();
    if (lastCalendar != null) {
        iframe.style.display = 'none';
        try {
            document.body.removeChild(iframe);
        } catch (e) {}
        if (lastCalendar.shown) {
            lastCalendar.hide();
        }
        if (lastCalendar.div.style.display != null) {
            if (lastCalendar.div.style.display == 'none' || lastCalendar.div.style.display == 'block') {
                lastCalendar.hide();
            }
        }
    }
}
/**
 * Imprime ticket
 */
function imprimirTicket(ticket) {
    var img = document.getElementById(ticket);
    var html = '<html><body onload="window.print(); window.close();">';
    html += img.parentNode.innerHTML;
    html += '</body></html>';
    ventana = window.open('', 'ventana', 'resizable=yes,scrollbars=no');
    ventana.document.write(html);
    ventana.document.close();
}

function exportToFile(strFile) {
    var newwindow = window.open(strFile, 'window2', '');
}

function getDateForGlb() {
    var fecha = new Date();
    var year = fecha.getFullYear();
    var mes = fecha.getMonth() + 1;
    var dia = fecha.getDate();
    var hora = fecha.getHours();
    var minutos = fecha.getMinutes();
    var segundos = fecha.getSeconds();
    if (mes < 10) mes = '0' + mes;
    if (dia < 10) dia = '0' + dia;
    if (hora < 10) hora = '0' + hora;
    if (minutos < 10) minutos = '0' + minutos;
    if (segundos < 10) segundos = '0' + segundos;
    var retorno = year + mes + dia + hora + minutos + segundos;
    return retorno;
}

function checkTextFieldInput(e, field) {
    var reg = new RegExp(field.getAttribute('regtext'));
    if (isIE && isIE < 8) {
        if (reg.test(e.srcElement.value)) {
            submitTextDependencies(e.srcElement.id);
        }
    } else {
        if (reg.test(e.target.value)) {
            submitTextDependencies(e.target.id);
        }
    }
}

function checkTextFieldInputWithoutValidation(evnt) {
    if (isIE && isIE < 8) {
        submitTextDependencies(evnt.srcElement.id);
    } else {
        submitTextDependencies(evnt.target.id);
    }
}

function submitTextDependencies(idText) {
    var formElement = document.getElementById('uuid');
    var parameters = encodeForm(getDocumentIDForm());
    var dataToSend = "";
    if (CyberBank.encryption.enable) {
        var p_temp = getRandomPassword();
        parameters = JSON.stringify(createSecureRequest(parameters, p_temp));
        dataToSend = {
            parameters: parameters
        }
    } else {
        dataToSend = parameters;
    }
    $.ajaxInvoker({
        type: 'POST',
        url: 'index',
        data: dataToSend,
        headers: {
            'Content-type': 'application/x-www-form-urlencoded; charset=UTF8',
            'idText': idText,
            'TextFieldRequest': 'TextFieldRequest'
        },
        async: false
    }).done(function(data, textStatus, resp) {
        var respText = data;
        if (CyberBank.encryption.enable) {
            respText = resolveSecureResponse(data, p_temp);
        }
        handleTfDependencies(respText);
    }).always(function() {
        anularTimeout(timerId);
        $.hideprogress();
    });
}

function handleTfData(xmlTf) {
    var id = xmlTf.childNodes[0].childNodes[0].nodeValue;
    var value = "";
    try {
        var value = xmlTf.childNodes[1].childNodes[0].nodeValue;
    } catch (e) {}
    var nodoValue = document.getElementById(id);
    nodoValue.value = value;
}

function handleTfDependencies(xml) {
    var tfdataerror = xml.documentElement.getElementsByTagName('tf-data-error');
    handleTextFieldError(tfdataerror);
    var tfdata = xml.documentElement.getElementsByTagName('tf');
    for (var i = 0; i < tfdata.length; i++) {
        handleTfData(tfdata[i]);
    }
    var selectdata = xml.documentElement.getElementsByTagName('cache-data');
    for (var j = 0; j < selectdata.length; j++) {
        handleTextFieldResponse(selectdata[j]);
    }
}

function handleTextFieldError(tfdataerror) {
    var errors = '';
    for (var i = 0; i < tfdataerror.length; i++) {
        var tferror = tfdataerror[i].getElementsByTagName('tf-error');
        errors += tferror[0].childNodes[1].childNodes[0].nodeValue + ".";
    }
    var transacExitosa = "Transacción exitosa";
    if (errors != '' && (errors.substr(0, transacExitosa.length) != "Transacción exitosa")) {
        showError("Error: " + errors);
    }
}

function handleTextFieldResponse(responseXML) {
    var fieldID = responseXML.getElementsByTagName('fieldID')[0].childNodes[0].nodeValue;
    var options = responseXML.getElementsByTagName('option');
    var optionPairs = new Array();
    for (var i = 0; i < options.length; i++) {
        var key = options[i].getElementsByTagName('key')[0];
        var value = options[i].getElementsByTagName('value')[0];
        optionPairs[key.childNodes[0].nodeValue] = value.childNodes[0].nodeValue;
    }
    if (isIE && isIE < 8) {
        fillSelectIE(fieldID, optionPairs);
        var selectObject = document.getElementById(fieldID);
        selectObject.setAttribute('loaded', 'true');
    } else {
        fillSelectField(fieldID, optionPairs);
    }
}
/**
 * Nueva ventana de ayuda
 *
 */
function showHint(hint, compID) {
    var l = $("#" + compID).offset().left;
    var t = $("#" + compID).offset().top;
    /******* Hack for IE6: Order of objects in DOM tree
     * Stacking context: When two elements have the same stack level, generally the one which is later in the DOM
     * tree is painted on top.  By putting help windows at the beginning of the form, I ensure they're shown
     * on top of any element in the layout.
     * ************/
    var detachedElement = $('#' + 'helpWindow_' + compID).detach();
    $("#" + getDocumentIDForm()).prepend(detachedElement);
    /** ***** End: Hack for IE6 *********** */
    $('#' + 'helpMsgPlaceholder_' + compID).html(hint);
    $('#' + 'helpWindow_' + compID).jqm({
        modal: false,
        overlay: 0
    }).jqmShow().jqDrag('.jqDrag');
    $('#' + 'helpWindow_' + compID).offset({
        top: t,
        left: l
    });
}

function crearNuevoUsuario() {
    var parameters = '';
    var formElement = '';
    var newUser = document.getElementById('newUser');
    newUser.value = true;
    parameters += formElement.name + '=' + encodeURIParams(formElement.value) + '&';
    parameters += newUser.name + '=' + encodeURIParams(newUser.value) + '&';
    parameters = parameters.substr(0, (parameters.length - 1));
    formElement = document.getElementById('uuid');
    var dataToSend = "";
    if (CyberBank.encryption.enable) {
        var p_temp = getRandomPassword();
        parameters = JSON.stringify(createSecureRequest(parameters, p_temp));
        dataToSend = {
            parameters: parameters
        }
    } else {
        dataToSend = parameters;
    }
    $.ajaxInvoker({
        type: 'POST',
        url: 'index',
        data: dataToSend,
        headers: {
            'Content-type': 'application/x-www-form-urlencoded; charset=UTF8',
            'nuevoUsuario': true
        },
        async: false
    }).done(function(data, textStatus, resp) {
        var respText = data;
        if (CyberBank.encryption.enable) {
            respText = resolveSecureResponse(data, p_temp);
        }
        cargarPrimerLayoutNewUser(respText);
        fillUuid();
        borrarTextoBarraEstado();
    }).always(function() {
        //TODO
    });
}

function olvidoPassword() {
    var parameters = '';
    var formElement = '';
    var inputSelection;
    var olvidoPass = document.getElementById('forgotPassword');
    olvidoPass.value = true;
    formElement = document.getElementById('uuid');
    parameters += formElement.name + '=' + encodeURIParams(formElement.value) + '&';
    parameters += olvidoPass.name + '=' + encodeURIParams(olvidoPass.value) + '&';
    parameters = parameters.substr(0, (parameters.length - 1));
    var dataToSend = "";
    if (CyberBank.encryption.enable) {
        var p_temp = getRandomPassword();
        parameters = JSON.stringify(createSecureRequest(parameters, p_temp));
        dataToSend = {
            parameters: parameters
        }
    } else {
        dataToSend = parameters;
    }
    $.ajaxInvoker({
        type: 'POST',
        url: 'index',
        data: dataToSend,
        headers: {
            'Content-type': 'application/x-www-form-urlencoded; charset=UTF8',
            'nuevoUsuario': true
        },
        async: false
    }).done(function(data, textStatus, resp) {
        var respText = data;
        if (CyberBank.encryption.enable) {
            respText = resolveSecureResponse(data, p_temp);
        }
        cargarPrimerLayoutNewUser(respText);
        fillUuid();
        borrarTextoBarraEstado();
    }).always(function() {
        //TODO
    });
}

function cargarPrimerLayoutNewUser(texto) {
    hideContainer();
    collapseAllMenus();
    document.getElementById("login").innerHTML = texto;
    document.getElementById("login").style.display = '';
    cargarDocumentReady();
    try {
        if ($($('form#main_form #errorPanelCollection p')) == null || $($('form#main_form #errorPanelCollection p')).length == 0) {
            document.getElementById(document.getElementById("focus").getAttribute('id_elem')).focus();
        }
    } catch (e) {}
}
/* arbolito */
function cargaInvisible(valor) {
    var ids = window.parent.document.getElementById("listaIds");
    ids.value = valor;
}

function uploadPopup(caption, path, tipos, entity_componente, accion) {
    var html = '<html><head>';
    html += '<style type="text/css">';
    html += 'fieldset {background-color:#E8F0F2;color:#000000;font-family:Arial;font-style:normal;font-weight:normal;text-decoration:none;}';
    html += '</style>';
    html += '</head>';
    html += '<body>';
    html += '<fieldset>';
    html += caption;
    html += '<table id="tableAlign2" class="structure_table"><tbody><tr><td>';
    html += '<form method="POST" enctype=\'multipart/form-data\' charset=\'utf-8\'  ';
    html += 'action="upload?path=';
    html += path;
    html += '&entity='
    html += entity_componente;
    // html += '&temp_dest='
    // html += temp_path;
    html += '">';
    html += '<input type="file"';
    html += 'name="fichero" id="browserNoVisible" charset="UTF-8" onChange=\'filtroArchivos(this,"' + tipos + '")\' accept="text/tcl" style="height = 25px; ">';
    html += '<input type="submit" value="Subir archivo" style="height = 25px; " charset="UTF-8" >';
    html += '<input type="hidden" id="accion" value="';
    html += accion;
    html += '">';
    html += '</form>';
    html += '</td></tr></tbody></table></fieldset></body></html>';
    ventana = window.open('uploadFile.html', '', 'top=300,left=300,width=500,height=200, status =0,toolbar=0 ');
    ventana.document.write(html);
    ventana.document.close();
}

function tieneCaracteresEspeciales(text) {
    caracteresEspeciales = /[áíóúñç]/g;
    if (text.match(caracteresEspeciales)) return true;
    return false;
}

function filtroArchivos(tField, ext) {
    file = tField.value;
    if (file == null && file == "") {
        showUploadError(traducir("No ingreso nombre de archivo."));
        return;
    }
    if (tieneCaracteresEspeciales(file)) {
        tField.value = "";
        showUploadError(traducir("El nombre del archivo es invalido. El mismo no debe contener ni acentos, ni caracteres especiales") + "<br>" + traducir("Por favor, seleccione un nuevo archivo, o modifique el nombre del actual."));
        return;
    }
    if (ext == "otros") {
        allowSubmit = true;
        return;
    }
    var valores = ext.split(".");
    var extArray = new Array();
    for (var j = 0; j < valores.length; j++) extArray.push(valores[j]);
    allowSubmit = false;
    if (!file) return;
    while (file.indexOf("\\") != -1) file = file.slice(file.indexOf("\\") + 1);
    ext = file.slice(file.indexOf(".") + 1).toLowerCase();
    for (var i = 0; i < extArray.length; i++) {
        if (extArray[i] == ext) {
            allowSubmit = true;
            break;
        }
    }
    if (allowSubmit) {
        hideUploadError();
    } else {
        tField.value = "";
        showUploadError(traducir("Usted solo puede subir archivos con extensiones") + ' ' + (extArray.join(" ")) + "<br>" + traducir("Por favor seleccione un nuevo archivo"));
    }
}

function downloadLink(idComp, servlet) {
    var buttonDown = document.getElementById(idComp);
    var coleccion = buttonDown.getAttribute('colsToValidate');
    if (coleccion != null)
        if (!validateCollections(coleccion)) return;
    var str = encodeForm(getDocumentIDForm())
    str = str.substr(0, (str.length - 1));
    var uuid = $('#uuid').val();
    var win = window.open(servlet + "&uuid=" + uuid + "&" + str, "window3", '');
}
/* Manejo de excepciones */
function mostrarexcepcion() {
    div = document.getElementById('exception_details');
    if (div.style.display == 'none') div.style.display = '';
    else div.style.display = 'none'
}
/* Completa con '/' mientras se ingresa la fecha */
function autocompletedate(field, event) {
    // Ignora la tecla BACKSPACE
    if (event.keyCode != 8) {
        value = field.value;
        switch (value.length) {
            case 2:
                field.value = value + '/';
                break;
            case 5:
                field.value = value + '/';
                break;
            default:
        }
    }
}
/** **************************************Hint****************************************************************** */
var horizontal_offset = "9px" //horizontal offset of hint box from anchor link
var vertical_offset = "0" //horizontal offset of hint box from anchor link. No need to change.
var ie = document.all
var ns6 = document.getElementById && !document.all

function getposOffset(what, offsettype) {
    var totaloffset = (offsettype == "left") ? what.offsetLeft : what.offsetTop;
    var parentEl = what.offsetParent;
    while (parentEl != null) {
        totaloffset = (offsettype == "left") ? totaloffset + parentEl.offsetLeft : totaloffset + parentEl.offsetTop;
        parentEl = parentEl.offsetParent;
    }
    return totaloffset;
}

function iecompattest() {
    return (document.compatMode && document.compatMode != "BackCompat") ? document.documentElement : document.body
}

function clearbrowseredge(obj, whichedge) {
    var edgeoffset = (whichedge == "rightedge") ? parseInt(horizontal_offset) * -1 : parseInt(vertical_offset) * -1
    if (whichedge == "rightedge") {
        var windowedge = ie && !window.opera ? iecompattest().scrollLeft + iecompattest().clientWidth - 30 : window.pageXOffset + window.innerWidth - 40
        dropmenuobj.contentmeasure = dropmenuobj.offsetWidth
        if (windowedge - dropmenuobj.x < dropmenuobj.contentmeasure) edgeoffset = dropmenuobj.contentmeasure + obj.offsetWidth + parseInt(horizontal_offset)
    } else {
        var windowedge = ie && !window.opera ? iecompattest().scrollTop + iecompattest().clientHeight - 15 : window.pageYOffset + window.innerHeight - 18
        dropmenuobj.contentmeasure = dropmenuobj.offsetHeight
        if (windowedge - dropmenuobj.y < dropmenuobj.contentmeasure) edgeoffset = dropmenuobj.contentmeasure - obj.offsetHeight
    }
    return edgeoffset
}

function showhint2(menucontents, obj, e, tipwidth) {
    var $element = $("#" + obj.id);
    var $element_p = $("#" + obj.id + " p");
    var buttonTextLength = $element.text().length;
    var buttonWidth = $element.width();
    var paddings = 0;
    var paddings_p = 0;
    var fontSize = 12;
    // check if is not undefined or null - IE Fix
    if ($element && $element.css('padding-right')) paddings = parseInt($element.css('padding-right').replace("px", ""));
    if ($element_p && $element_p.css('padding-right')) paddings_p = parseInt($element_p.css('padding-right').replace("px", ""));
    if ($element && $element_p.css('font-size')) fontSize = parseInt($element.css('font-size').replace("px", ""));
    var pxNeeded = (buttonTextLength * fontSize) + Number(paddings + paddings_p + 11); //11 lengthMax
    if (buttonWidth > pxNeeded) { // text fits, don't show the hint
        return;
    }
    if (document.getElementById("hintbox")) {
        dropmenuobj = document.getElementById("hintbox");
        dropmenuobj.innerHTML = menucontents;
        dropmenuobj.style.left = dropmenuobj.style.top = -500;
        if (tipwidth != "") {
            dropmenuobj.widthobj = dropmenuobj.style;
            dropmenuobj.widthobj.width = tipwidth;
        }
        dropmenuobj.x = getposOffset(obj, "left");
        dropmenuobj.y = getposOffset(obj, "top");
        dropmenuobj.style.left = dropmenuobj.x - clearbrowseredge(obj, "rightedge") + obj.offsetWidth + "px";
        dropmenuobj.style.top = dropmenuobj.y - clearbrowseredge(obj, "bottomedge") + "px";
        $("#hintbox").css('visibility', 'visible');
        obj.onmouseout = hidetip;
    }
}

function hidetip(e) {
    $("#hintbox").css('visibility', 'hidden');
    if (typeof dropmenuobj !== 'undefined') {
        dropmenuobj.style.left = "-500px";
        dropmenuobj.style.top = "-500px";
    }
}

function createhintbox() {
    var divblock = document.createElement("div")
    divblock.setAttribute("id", "hintbox")
    document.body.appendChild(divblock)
}
if (window.addEventListener) window.addEventListener("load", createhintbox, false)
else if (window.attachEvent) window.attachEvent("onload", createhintbox)
else if (document.getElementById) window.onload = createhintbox
/******************************************hint fin********************************************************/
/** ******************************************************************************************************* */
/** ******************************************************************************************************* */
/*
 * Dado el o los objetos seleccionados los pasa de la tabla "origen" a "destino"
 */
function pass(from, to) {
    var isMSIE = getInternetExplorerVersion() > -1 && getInternetExplorerVersion() < 8;
    var f = document.getElementById(from);
    var t = document.getElementById(to);
    var copia = document.getElementById(from);;
    var i;
    for (i = f.length - 1; i >= 0; i--) {
        if (f.options[i].selected) {
            if (!isMSIE) t.add(f.options[i], null);
            else t.options[t.options.length] = new Option(f.options[i].text, 1);
        }
    }
    for (i = copia.length - 1; i >= 0; i--) {
        if (copia.options[i].selected) {
            if (!isMSIE) copia.remove(i);
            else copia.options[i] = null;
        }
    }
}
/*
Pasa todos los elementos de un panel a otro
*/
function passAll(from, to) {
    $("#" + from + " option").appendTo("#" + to);
}
// MJM: quick fix por corte de strings cuando hay "&" en campos de nombre.
function encodeURIParams(param) {
    return encodeURIComponent(param);
}
/**
 * MJM:
 *
 * Implementacion de getElementsByClassName para soporte crossbrowser
 * @param {Object} cl(assName)
 */
document.getElementsByClassName = function(cl) {
    var retnode = [];
    var myclass = new RegExp('\\b' + cl + '\\b');
    var elem = this.getElementsByTagName('*');
    for (var i = 0; i < elem.length; i++) {
        var classes = elem[i].className;
        if (myclass.test(classes)) retnode.push(elem[i]);
    }
    return retnode;
};
/***********************************CODIGO PARA SOLAPAS**************************************************************/
var flaps = null;

function evalScript() {
    var input = document.getElementById("script");
    if (input != null && input.value != "") {
        eval(input.value);
    }
}

function createFlap(id) {
    flaps = new ddtabcontent(id);
    flaps.setpersist(true);
    flaps.setselectedClassTarget('link');
    flaps.init();
}

function ddtabcontent(tabinterfaceid) {
    this.tabinterfaceid = tabinterfaceid // ID of Tab Menu main container
    this.tabs = document.getElementById(tabinterfaceid).getElementsByTagName("a") //Get all tab links within container
    this.enabletabpersistence = true
    this.hottabspositions = [] //Array to store position of tabs that have a "rel" attr defined, relative to all tab links, within container
    this.currentTabIndex = 0 //Index of currently selected hot tab (tab with sub content) within hottabspositions[] array
    this.subcontentids = [] //Array to store ids of the sub contents ("rel" attr values)
    this.revcontentids = [] //Array to store ids of arbitrary contents to expand/contact as well ("rev" attr values)
    this.selectedClassTarget = "link" //keyword to indicate which target element to assign "selected" CSS class ("linkparent" or "link")
}
ddtabcontent.getCookie = function(Name) {
    var re = new RegExp(Name + "=[^;]+", "i"); //construct RE to search for target name/value pair
    if (document.cookie.match(re)) // if cookie found
        return document.cookie.match(re)[0].split("=")[1] // return its value
    return ""
}
ddtabcontent.setCookie = function(name, value) {
    document.cookie = name + "=" + value + ";path=/" //cookie value is domain wide (path=/)
}
ddtabcontent.prototype = {
    expandit: function(tabid_or_position) { //PUBLIC function to select a tab either by its ID or position(int) within its peers
        this.cancelautorun() // stop auto cycling of tabs (if running)
        var tabref = ""
        try {
            if (typeof tabid_or_position == "string" && document.getElementById(tabid_or_position).getAttribute("rel")) //if specified tab contains "rel" attr
                tabref = document.getElementById(tabid_or_position)
            else if (parseInt(tabid_or_position) != NaN && this.tabs[tabid_or_position].getAttribute("rel")) //if specified tab contains "rel" attr
                tabref = this.tabs[tabid_or_position]
        } catch (err) {
            showError("Invalid Tab ID or position entered!")
        }
        if (tabref != "") //if a valid tab is found based on function parameter
            this.expandtab(tabref) // expand this tab
    },
    cycleit: function(dir, autorun) { //PUBLIC function to move foward or backwards through each hot tab (tabinstance.cycleit('foward/back') )
        if (dir == "next") {
            var currentTabIndex = (this.currentTabIndex < this.hottabspositions.length - 1) ? this.currentTabIndex + 1 : 0
        } else if (dir == "prev") {
            var currentTabIndex = (this.currentTabIndex > 0) ? this.currentTabIndex - 1 : this.hottabspositions.length - 1
        }
        if (typeof autorun == "undefined") //if cycleit() is being called by user, versus autorun() function
            this.cancelautorun() //stop auto cycling of tabs (if running)	initMenu()
        this.expandtab(this.tabs[this.hottabspositions[currentTabIndex]])
    },
    setpersist: function(bool) { //PUBLIC function to toggle persistence feature
        this.enabletabpersistence = bool
    },
    setselectedClassTarget: function(objstr) { //PUBLIC function to set which target element to assign "selected" CSS class ("linkparent" or "link")
        this.selectedClassTarget = objstr || "link"
    },
    getselectedClassTarget: function(tabref) { //Returns target element to assign "selected" CSS class to
        return (this.selectedClassTarget == ("linkparent".toLowerCase())) ? tabref.parentNode : tabref
    },
    urlparamselect: function(tabinterfaceid) {
        var result = window.location.search.match(new RegExp(tabinterfaceid + "=(\\d+)", "i")) //check for "?tabinterfaceid=2" in URL
        return (result == null) ? null : parseInt(RegExp.$1) //returns null or index, where index (int) is the selected tab's index
    },
    expandtab: function(tabref) {
        var subcontentid = tabref.getAttribute("rel") //Get id of subcontent to expand
        //Get "rev" attr as a string of IDs in the format ",john,george,trey,etc," to easily search through
        var associatedrevids = (tabref.getAttribute("rev")) ? "," + tabref.getAttribute("rev").replace(/\s+/, "") + "," : ""
        this.expandsubcontent(subcontentid)
        this.expandrevcontent(associatedrevids)
        for (var i = 0; i < this.tabs.length; i++) { //Loop through all tabs, and assign only the selected tab the CSS class "selected"
            this.getselectedClassTarget(this.tabs[i]).className = (this.tabs[i].getAttribute("rel") == subcontentid) ? "selected" : ""
        }
        if (this.enabletabpersistence) //if persistence enabled, save selected tab position(int) relative to its peers
            ddtabcontent.setCookie(this.tabinterfaceid, tabref.tabposition)
        this.setcurrenttabindex(tabref.tabposition) //remember position of selected tab within hottabspositions[] array
    },
    expandsubcontent: function(subcontentid) {
        for (var i = 0; i < this.subcontentids.length; i++) {
            var subcontent = document.getElementById(this.subcontentids[i]) //cache current subcontent obj (in for loop)
            subcontent.style.display = (subcontent.id == subcontentid) ? "block" : "none" //"show" or hide sub content based on matching id attr value
        }
    },
    expandrevcontent: function(associatedrevids) {
        var allrevids = this.revcontentids
        for (var i = 0; i < allrevids.length; i++) { //Loop through rev attributes for all tabs in this tab interface
            //if any values stored within associatedrevids matches one within allrevids, expand that DIV, otherwise, contract it
            document.getElementById(allrevids[i]).style.display = (associatedrevids.indexOf("," + allrevids[i] + ",") != -1) ? "block" : "none"
        }
    },
    setcurrenttabindex: function(tabposition) { //store current position of tab (within hottabspositions[] array)
        for (var i = 0; i < this.hottabspositions.length; i++) {
            if (tabposition == this.hottabspositions[i]) {
                this.currentTabIndex = i
                break
            }
        }
    },
    autorun: function() { //function to auto cycle through and select tabs based on a set interval
        this.cycleit('next', true)
    },
    cancelautorun: function() {
        if (typeof this.autoruntimer != "undefined") clearInterval(this.autoruntimer)
    },
    init: function(automodeperiod) {
        var persistedtab = ddtabcontent.getCookie(this.tabinterfaceid) //get position of persisted tab (applicable if persistence is enabled)
        var selectedtab = -1 //Currently selected tab index (-1 meaning none)
        var selectedtabfromurl = this.urlparamselect(this.tabinterfaceid) //returns null or index from: tabcontent.htm?tabinterfaceid=index
        this.automodeperiod = automodeperiod || 0
        for (var i = 0; i < this.tabs.length; i++) {
            this.tabs[i].tabposition = i //remember position of tab relative to its peers
            if (this.tabs[i].getAttribute("rel")) {
                var tabinstance = this
                this.hottabspositions[this.hottabspositions.length] = i //store position of "hot" tab ("rel" attr defined) relative to its peers
                this.subcontentids[this.subcontentids.length] = this.tabs[i].getAttribute("rel") //store id of sub content ("rel" attr value)
                this.tabs[i].onclick = function() {
                    tabinstance.expandtab(this)
                    tabinstance.cancelautorun() //stop auto cycling of tabs (if running)
                    return false
                }
                if (this.tabs[i].getAttribute("rev")) { //if "rev" attr defined, store each value within "rev" as an array element
                    this.revcontentids = this.revcontentids.concat(this.tabs[i].getAttribute("rev").split(/\s*,\s*/))
                }
                if (selectedtabfromurl == i || this.enabletabpersistence && selectedtab == -1 && parseInt(persistedtab) == i || !this.enabletabpersistence && selectedtab == -1 && this.getselectedClassTarget(this.tabs[i]).className == "selected") {
                    selectedtab = i // Selected tab index, if found
                }
            }
        } // END for loop
        if (selectedtab != -1) //if a valid default selected tab index is found
            this.expandtab(this.tabs[selectedtab]) //expand selected tab (either from URL parameter, persistent feature, or class="selected" class)
        else // if no valid default selected index found
            this.expandtab(this.tabs[this.hottabspositions[0]]) //Just select first tab that contains a "rel" attr
        if (parseInt(this.automodeperiod) > 500 && this.hottabspositions.length > 1) {
            this.autoruntimer = setInterval(function() {
                tabinstance.autorun()
            }, this.automodeperiod)
        }
    } // END int() function
} // END Prototype assignment
function trim(valor) {
    return valor.replace(/^\s+/g, '').replace(/\s+$/g, '')
}
// Traducciones por javascript
// Usar para traducir javascript
function traducir(idLiteral) {
    var lenguajeValue = "";
    var lenguajeKey = "";
    var traducciones = "";
    if (document.getElementById("lenguajeJavascript")) {
        traducciones = document.getElementById("lenguajeJavascript").value;
    }
    var lenguaje = leerCookie("view-language-cookie");
    if (lenguaje != null) lenguaje = trim(lenguaje);
    else //pongo el idioma español por dafault para que no se rompa, si falla la cookie
        lenguaje = 'español';
    var sep = traducciones.split('javascript');
    for (x = 0; x < sep.length; x++) {
        if (sep[x].substr(0, lenguaje.length) == lenguaje) {
            lenguajeValue = lenguajeValue + sep[x].split('|')[2] + '|';
        }
        if (sep[x].substr(0, lenguaje.length) == lenguaje) {
            lenguajeKey = lenguajeKey + sep[x].split('|')[1] + '|';
        }
    }
    if (lenguajeKey != undefined && lenguajeKey != "") {
        var tradKey = lenguajeKey.split('|');
        var tradValue = lenguajeValue.split('|');
        for (l = 0; l < tradKey.length; l++) {
            if (idLiteral == tradKey[l]) {
                return tradValue[l];
            }
        }
    }
    return idLiteral;
}
/***************************Refactor Menu******************************************/
var entro = true;
var nar = true;
var vectNarrow = new Array();
var count;
var primero;

function ocultarMenu(valor) {
    $('ul#subMenuChoose2 li').css({
        "display": "none"
    });
}

function changeColor(elem, aClass) {
    elem.addClass(aClass);
}

function mostrarNarrowMenu(valor, i) {
    count = count + 1;
    if (vectNarrow[0] == primero) {
        vectNarrow[count] = i;
        if (vectNarrow[count].split("saca")[1] == vectNarrow[0].split("saca")[1]) {
            // $('*#subMenuChoose2').find('li').css({"backgroundColor" : "#4D82AC"});
            vectNarrow = new Array();
            count = 0;
            primero = '';
        } else {
            $('li#' + vectNarrow[count]).siblings().find('ul').css({
                "visibility": "hidden"
            });
            $('li#' + vectNarrow[count]).find('ul').css({
                "visibility": "hidden"
            });
            $('li#' + vectNarrow[count]).find('ul:first').css({
                "visibility": "visible"
            });
        }
    }
    if (count == 0) {
        primero = i;
        vectNarrow[0] = i;
        $('[id*=narrow] ul').css({
            "visibility": "hidden"
        });
        // $('*#subMenuChoose2').find('li').css({"backgroundColor" : "#4D82AC"});
        $('li#' + i).find('ul:first').css({
            "visibility": "visible"
        });
    }
}

function nada(valor) {
    entro = false;
    nar = false;
    // $(valor).find('li').css({"backgroundColor" : "#4D82AC"});
}

function sacarNarrows(valor) {
    // $(valor).parent().find('li').css({"backgroundColor" : "#4D82AC"});
    if (($(valor).parent().parent().attr("id")) == "subMenuChoose2") {
        $('[id*=narrow] ul').css({
            "visibility": "hidden"
        });
    }
    // $('*#subMenuChoose2').find('li').css({"backgroundColor" : "#4D82AC"});
    // para ponerle sombra al seleccionado agregar abajo #848484
    // $(valor).css({"backgroundColor" : "#4D82AC"})
}

function stopMenu2(valor) {
    vectNarrow[0] = 'x';
    count = -1;
    primero = '';
    var pro = $('ul#subMenuChoose2 li', valor).css("display");
    if (pro == undefined || pro == "none") {
        entro = true;
    }
    if (nar) {
        if (entro) {
            entro = false;
            $('ul#subMenuChoose2 li').css({
                "display": "none"
            });
            $(valor).not('span').find('ul:first').attr("id", "subMenuChoose");
            $('ul#subMenuChoose li').css({
                "display": ""
            });
            $('[id*=narrow] ul').css({
                "visibility": "hidden"
            });
            // Vuelvo atras background
            // $(valor).find('li').css({"backgroundColor" : "#4D82AC"});
            $(valor).not('span').find('ul:first').attr("id", "subMenuChoose2");
        } else {
            $('ul#subMenuChoose2 li').css({
                "display": "none"
            });
            entro = true;
        }
    } else {
        nar = true;
    }
}
/**********************************Refactor menu*************************************/
/** ************************PRUEBA SECTION JQUERY******************************** */
/** Tab Focus* */
function codeNum(e) {
    $('.' + $('.selectIdDinamicoHidden_h').val()).keydown(function(e) {
        var key = e.charCode ? e.charCode : e.keyCode;
        if (key == 9) {
            $('.' + $('.selectIdDinamicoHidden_h').val()).blur();
        }
    });
}
// Funcion que muestra el tooltip de un combobox
function tooltipselect(miSelect) {
    if (miSelect.selectedIndex != -1 && miSelect.options[miSelect.selectedIndex] != null) miSelect.title = miSelect.options[miSelect.selectedIndex].text;
}
/**
 * Returns the first form that matches
 */
function getDocumentForm() {
    return document.getElementById("main_form_modal") || document.getElementById("main_form");
}

function getDocumentIDForm() {
    if (document.getElementById("main_form_modal") != null) {
        return "main_form_modal";
    }
    return "main_form";
}
/**
 * Use to change an image with another (fadeIn, fadeOut effect)
 * @param from_img
 * @param to_img
 */
function changeImage(from_img, to_img) {
    var source = from_img.src;
    var alt = $(from_img).attr("alt");
    $(to_img).fadeOut("slow", function() {
        $(to_img).attr("src", source);
        $(to_img).attr("alt", alt);
        $(to_img).fadeIn();
    });
};

function submitLogin(workflowId) {
    var formElement = '';
    var parameters = 'seleccion=' + encodeURIParams(workflowId) + '&';
    formElement = document.getElementById('uuid');
    parameters += formElement.name + '=' + encodeURIParams(formElement.value) + '&';
    formElement = document.getElementById('IDContexto');
    if (formElement != null) {
        parameters += formElement.name + '=' + encodeURIParams(formElement.value) + '&';
    }
    formElement = document.getElementById('loginContext');
    var loginContext = false;
    var externalURLError = "";
    if (formElement) {
        parameters += formElement.name + '=' + encodeURIParams(formElement.value) + '&';
        formElement = document.getElementById('identificationTypeContext');
        parameters += formElement.name + '=' + encodeURIParams(formElement.value) + '&';
        formElement = document.getElementById('workflowContext');
        parameters += formElement.name + '=' + encodeURIParams(formElement.value) + '&';
        formElement = document.getElementById('userNameContext');
        parameters += formElement.name + '=' + encodeURIParams(formElement.value) + '&';
        formElement = document.getElementById('passwordContext');
        parameters += formElement.name + '=' + encodeURIParams(formElement.value) + '&';
        loginContext = true;
        formElement = document.getElementById('returnUrlErrorContext');
        externalURLError = formElement.value;
    }
    parameters = parameters.substr(0, (parameters.length - 1));
    var dataToSend = "";
    if (CyberBank.encryption.enable) {
        var p_temp = getRandomPassword();
        parameters = JSON.stringify(createSecureRequest(parameters, p_temp));
        dataToSend = {
            parameters: parameters
        }
    } else {
        dataToSend = parameters;
    }
    $.ajaxInvoker({
        type: 'POST',
        url: 'index',
        data: dataToSend,
        headers: {
            'Content-type': 'application/x-www-form-urlencoded; charset=UTF8',
            'Get-Form': 'true'
        },
        async: false
    }).done(function(data, textStatus, resp) {
        var respText = data;
        if (CyberBank.encryption.enable) {
            respText = resolveSecureResponse(data, p_temp);
        }
        if (trim(respText) != "logout") {
            if (successLogin(trim(respText))) {
                $('#seleccion').val("successLogin");
                $("#loginForm").submit();
            } else {
                if (loginContext && hasErrorToShow(respText)) {
                    closeSesion();
                    window.location.href = getUrlExternalError(externalURLError, respText);
                    return;
                }
            }
            cargarPrimerLayout(respText, workflowId);
            fillUuid();
            $('#cyberbankBody').show();
            $("#languageContainer").css('display', 'block');
            CyberBank.utils.resetButtonCursors();
            showModalWindow();
        } else {
            doLogout();
        }
    }).always(function() {
        //TODO
    });
}

function getUrlExternalError(returnUrl, response) {
    var externalURL = returnUrl;
    externalURL += "?errorMessage=" + getErrorMessage(response);
    return externalURL;
}

function hasErrorToShow(responseText) {
    var mess = getErrorMessage(responseText);
    if (null == mess || "null" == mess || typeof(mess) === "undefined" || mess === "undefined") return false;
    return true;
}

function getErrorMessage(responseText) {
    var mess = $(responseText).find(".error-panel_title").html();
    return escape(mess);
}
/**
 * Checks if a servlet response contains the succes login flag
 */
function successLogin(content) {
    try {
        return (content.trim() == "successLogin");
    } catch (e) {
        return false;
    }
}
/**
 * Aplica la funcion hover de CSS.
 * @param component a seleccionar el hover.
 */
function drawHoverComponent(component) {
    if (!component) return;
    var id = component.attr('id');
    var clase = $("#" + id).attr("class");
    $('#' + id).removeAttr('style');
    if (isIENavigator()) {
        return drawHoverCompForIE(id, clase);
    }
    try {
        var attrs = jss('.' + clase + ':hover').get();
        $.each(attrs, function(key, value) {
            $('#' + id).css(key, jss('.' + clase + ':hover').get(key));
        });
    } catch (err) {}
}

function drawHoverCompForIE(id, clase) {
    if (!clase) return;
    if (!id) return;
    var gAttr = ['font-family', 'font-size', 'font-weight', 'font-style', 'color', 'text-transform', 'text-decoration', 'letter-spacing', 'word-spacing', 'line-height', 'text-align', 'vertical-align', 'direction', 'background-color', 'background-image', 'background-repeat', 'background-position', 'background-attachment', 'opacity', 'width', 'height', 'top', 'right', 'bottom', 'left', 'margin-top', 'margin-right', 'margin-bottom', 'margin-left', 'padding-top', 'padding-right', 'padding-bottom', 'padding-left', 'border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width', 'border-top-color', 'border-right-color', 'border-bottom-color', 'border-left-color', 'border-top-style', 'border-right-style', 'border-bottom-style', 'border-left-style', 'position', 'display', 'visibility', 'z-index', 'overflow-x', 'overflow-y', 'white-space', 'clip', 'float', 'clear', 'cursor', 'list-style-image', 'list-style-position', 'list-style-type', 'marker-offset'];
    for (var i = 0, len = gAttr.length; i < len; i++) {
        // console.log(jss('#menu1:hover').get(gAttr[i]));
        if (jss('.' + clase + ':hover').get(gAttr[i])) {
            // console.log(gAttr[i]);
            $('#' + id).css(gAttr[i], jss('.' + clase + ':hover').get(gAttr[i]));
        }
    }
}

function isIENavigator() {
    return (navigator.appName.indexOf("Internet Explorer") != -1);
}

function searhTabSelected() {
    var c;
    $("table[id^='tabComponent']").each(function() {
        $(this).eq(0).find('tr').each(function() {
            $(this).find('td').each(function() {
                $(this).find('span').each(function() {
                    $(this).find('button').each(function() {
                        // console.log($(this).attr('id'));
                        // console.log($(this).attr('seleccionado'));
                        if ($(this).attr('seleccionado') == 'true' /*|| $(this).attr('default') == 'true'*/ ) {
                            // console.log($(this).parent().html());
                            c = $(this);
                            // return $(this);
                        }
                    })
                })
            })
        })
    });
    return c;
}

function searchIsDefaultTabPresent() {
    var c;
    $('[name=tab-component] tr').eq(1).each(function() {
        $(this).find('td').each(function() {
            $(this).find('span').each(function() {
                $(this).find('button').each(function() {
                    if ($(this).attr('default') == 'true') {
                        c = $(this);
                    }
                })
            })
        })
    });
    return c;
}

function drawDefaultCssTabs() {
    $("table[id^='tabComponent']").each(function() {
        $(this).eq(0).find('tr').each(function() {
            $(this).find('td').each(function() {
                $(this).find('span').each(function() {
                    $(this).find('button').each(function() {
                        $(this).removeAttr('style');
                    })
                })
            })
        })
    });
}

function isDrawInTab() {
    if (container2Draw) {
        return true;
    }
    return false;
}

function clearTabComponent() {
    $("#tab").val('');
}

function changeIDs(idDiv, clonedDiv, repeatNumber) {
    var index = idDiv.length + "_repeat".length;
    var index2 = index + repeatNumber.toString().length;
    clonedDiv.find("*[id]").each(function() {
        count++;
        var oldID = $(this).attr("id");
        if (!oldID.substring(0, 3) == "div" && !oldID.substring(0, 3) == "req" && !oldID.substring(0, 6) == "hidden") {
            $(this).attr("id", oldID.substring(0, index) + repeatNumber + oldID.substring(index2));
        }
    });
    clonedDiv.find("*[name]").each(function() {
        var oldID = $(this).attr("name");
        if (!oldID.substring(0, 3) == "div" && !oldID.substring(0, 3) == "req" && !oldID.substring(0, 6) == "hidden") {
            $(this).attr("name", oldID.substring(0, index) + repeatNumber + oldID.substring(index2));
        }
    });
    var count = clonedDiv.find("*[tabindex]").size();
    clonedDiv.find("*[tabindex]").each(function() {
        var newTabI = parseInt($(this).attr("tabindex")) + count;
        $(this).attr("tabindex", newTabI);
    });
    clonedDiv.find("*[value]").each(function() {
        $(this).attr("value", "");
    });
    clonedDiv.find("img").each(function() {
        $(this).attr("onclick", "eliminarRepeteableDiv('" + idDiv + "_repeat" + repeatNumber + "','" + idDiv + "')");
    });
    clonedDiv.attr("id", idDiv + "_repeat" + repeatNumber);
    return clonedDiv;
}

function addNewCollectionRow(idDiv, max) {
    var repeatNumber = parseInt($("#" + idDiv + "_repeats").val());
    if (repeatNumber < max) {
        var clonedDiv = $('#' + idDiv + '_repeat' + (repeatNumber - 1)).clone(false);
        if (repeatNumber == 1) {
            clonedDiv.prepend("<div style='float:right;cursor:pointer'><img id='closeImg' src='./images/modal_agenda/ico_cerrar_Off.png' onclick=\"eliminarRepeteableDiv('" + idDiv + "_repeat" + repeatNumber + "','" + idDiv + "')\"></div>");
        }
        clonedDiv = changeIDs(idDiv, clonedDiv, repeatNumber);
        $('#' + idDiv + "_repeat" + (repeatNumber - 1)).after(clonedDiv);
        $("#" + idDiv + "_repeats").val(repeatNumber + 1);
    }
}

function eliminarRepeteableDiv(div, idDiv) {
    var end = idDiv.length + "_repeat".length;
    var idRepeat = $("#" + div).attr('id').substring(end);
    var numRepeats = $("#" + idDiv + "_repeats").val() - 1;
    // elimino solo si es el ultimo DIV
    if (idRepeat == numRepeats) {
        $("#" + div).remove();
        $("#" + idDiv + "_repeats").val(numRepeats);
    }
}
// Pasar todo lo de segundo factor a un js nuevo.
function checkAndLoadIfSecondFactorPresent() {
    if ($("#second-factor").length > 0) {
        if ($("#second-factor").attr('display-mode') == 'Modal') {
            $(function() {
                $("#second-factor").dialog({
                    height: 'auto',
                    width: 'auto',
                    resizable: false,
                    dialogClass: "no-close",
                    draggable: false,
                    position: ['center', 'center'],
                    closeOnEscape: false,
                    modal: true,
                    close: function(event, ui) {
                        $(".ui-dialog").dialog('.ui-dialog').remove();
                    },
                    buttons: [{
                        text: traducir("Aceptar"),
                        icons: {
                            primary: "ui-icon-heart"
                        },
                        "class": 'action-button_default_blue',
                        click: function() {
                            var formSecondFactor = document.getElementById('main_form_modal');
                            var isValid = true;
                            var errorMessage = '';
                            for (var i = 0; i < formSecondFactor.elements.length; i++) {
                                var formElementValue = '';
                                var pageItem = retrieveFormElement(formSecondFactor, i);
                                var itemRequiered = pageItem.hasAttribute('required')
                                if (itemRequiered && pageItem.value == '') {
                                    isValid = false;
                                    if (pageItem.hasAttribute('validationMessage')) {
                                        errorMessage = setErrorMessage(errorMessage, pageItem, pageItem.getAttribute('validationMessage') + "\n");
                                    } else {
                                        errorMessage = setErrorMessage(errorMessage, pageItem, pageItem.getAttribute('caption') + ' ' + traducir("es obligatorio") + "\n");
                                    }
                                    document.getElementById(formElement.id).focus();
                                }
                            }
                            if (!isValid) {
                                showError(errorMessage);
                            } else {
                                hideErrorPanel();
                            }
                            if ($("#errorPanel").css('display') == 'none') {
                                $(this).dialog("close");
                            }
                        },
                        mouseover: function() {
                            $(this).removeClass("action-button_default_blue").addClass("action-button_default_blue:hover");
                        },
                        mouseout: function() {
                            $(this).removeClass("action-button_default_blue:hover").addClass("action-button_default_blue");
                        }
                    }, {
                        text: traducir("Cancelar"),
                        icons: {
                            primary: "ui-icon-heart"
                        },
                        "class": 'action-button_default',
                        click: function() {
                            submitSubmenuByAjax('massiveSelectCustomerOperationTestFramework');
                            setLastMenuPathForDebugInfo('Technisys > Mis Productos > Posición Consolidada');
                            $(this).dialog("close");
                        },
                        mouseover: function() {
                            $(this).removeClass("action-button_default").addClass("action-button_default:hover");
                        },
                        mouseout: function() {
                            $(this).removeClass("action-button_default:hover").addClass("action-button_default");
                        },
                    }],
                    open: function() {
                        $('.ui-dialog-buttonpane').find('button').addClass('action-button_loginAceptar');
                    }
                });
            });
        } else if ($("#second-factor").attr('display-mode') == 'Pagina') {} else if ($("#second-factor").attr('display-mode') == 'Default') {}
        if (document.getElementById('secondFactorMarker') != null && $("#second-factor").attr('display-mode') != 'Modal') {
            $("div > #secondFactorContainer").each(function() {
                // console.log($(this).attr('id'));
                if ($(this).is(':visible')) {
                    $(this).find('button').each(function() {
                        if ($(this).attr('id') == 'autoLoad') {
                            $(this).hide();
                            document.getElementById('tab').value = 'secondFactorContainer';
                            secondFactorLoading = true;
                            $(this).click();
                        }
                    })
                    $(this).show();
                }
                $(this).show();
            });
        } else {
            $("div > #second-factor").each(function() {
                // console.log($(this).attr('id'));
                if ($(this).is(':visible')) {
                    $(this).find('button').each(function() {
                        if ($(this).attr('id') == 'autoLoad') {
                            $(this).hide();
                            document.getElementById('tab').value = 'second-factor';
                            secondFactorLoading = true;
                            $(this).click();
                        }
                    })
                    $(this).show();
                }
                $(this).show();
            });
        }
    } else {}
}

function setContainer2Draw(component) {
    document.getElementById('tab').value = component;
}

function testStrength(elem) {
    transitionTo(jQuery(".medidor"), medirFortaleza(jQuery(elem).val()));
    return true;
}

function doLogout() {
    window.location.href = 'sso';
}

function toggleWidget(elem) {
    $(elem).siblings('.contenido').stop(true, true).slideToggle(300);
    $(elem).parent('.widget').toggleClass('abierto');
}

function callWidgetAjax(widgetId, uuid, contexto) {
    var parameters = 'uuid=' + uuid + '&IDContexto=' + contexto + '&widgetId=' + widgetId;
    var dataToSend = "";
    if (CyberBank.encryption.enable) {
        var p_temp = getRandomPassword();
        parameters = JSON.stringify(createSecureRequest(parameters, p_temp));
        dataToSend = {
            parameters: parameters
        }
    } else {
        dataToSend = parameters;
    }
    $.ajaxInvoker({
        type: 'POST',
        url: 'widget/update.do',
        headers: {
            'Content-type': 'application/x-www-form-urlencoded'
        },
        data: dataToSend
    }).done(function(data, textStatus, resp) {
        var respText = data;
        if (CyberBank.encryption.enable) {
            respText = resolveSecureResponse(data, p_temp);
        }
        $('#' + widgetId).parent().html(respText);
        $('#' + widgetId).show();
    });
}

function updateLastMenuPathForDebugInfo() {
    if ($('#menupath').length) {
        $('#menupath').text("Menu: " + lastMenuPathForDebugInfo);
    }
}

function setMenuPath(path) {
    setLastMenuPathForDebugInfo(path);
}

function setLastMenuPathForDebugInfo(path) {
    lastMenuPathForDebugInfo = path;
}
/* INI CAPTCHA*/
function l_DetectFirefox3() {
    var detected = false;
    if (navigator && navigator.userAgent) {
        var matches = navigator.userAgent.match(/(Firefox)\/(3\.6\.[^;\+,\/\s]+)/);
        if (matches) {
            detected = true;
        }
    }
    return detected;
}

function l_DetectSafariSsl() {
    var detected = false;
    if (navigator && navigator.userAgent) {
        var matches = navigator.userAgent.match(/Safari/);
        if (matches) {
            matches = navigator.userAgent.match(/Chrome/);
            if (!matches && document.location.protocol === "https:") {
                detected = true;
            }
        }
    }
    return detected;
}

function l_DetectSafariMac() {
    var detected = false;
    if (navigator && navigator.userAgent) {
        var matches = navigator.userAgent.match(/Safari/);
        if (matches) {
            matches = navigator.userAgent.match(/Chrome/);
            if (!matches && navigator.userAgent.match(/Macintosh/)) {
                detected = true;
            }
        }
    }
    return detected;
}

function l_DetectIncompetentBrowsers() {
    return l_DetectFirefox3() || l_DetectSafariSsl() || l_DetectSafariMac();
}

function l_UseHtml5Audio() {
    var html5SoundSupported = false;
    var browserCompatibilityCheck = document.createElement('audio');
    html5SoundSupported = (!!(browserCompatibilityCheck.canPlayType) && !!(browserCompatibilityCheck.canPlayType("audio/wav")) && !l_DetectIncompetentBrowsers() // some browsers say they support the audio even when they have issues playing it
    );
    return html5SoundSupported;
}

function playSound(placeholderId) {
    if (!document.getElementById) {
        return;
    }
    var soundUrl = "audio.wav?time=" + new Date();
    var placeholder = document.getElementById(placeholderId + '_audioDiv');
    placeholder.innerHTML = '';
    var useHtml5Audio = l_UseHtml5Audio();
    if (useHtml5Audio) { // html5 audio
        var sound = new Audio(soundUrl);
        sound.id = placeholderId + '_audio';
        sound.type = 'audio/wav';
        sound.autobuffer = false;
        sound.loop = false;
        placeholder.appendChild(sound);
        sound.play();
    } else { // xhtml embed + object
        var objectSrc = "<object id='" + placeholderId + "_audio' height='0' width='0' style='width:0; height:0;'><param name='AutoStart' value='true' /><param name='AutoPlay' value='true' /><param name='Volume' value='100' /><param name='PlayCount' value='1' /><param name='FileName' value='" + soundUrl + "' /><embed id='" + placeholderId + "_audio' src='" + soundUrl + "' autoplay='true' autostart='true' hidden='true' volume='100' type='audio/wav' style='display:inline;' /></object>";
        placeholder.innerHTML = objectSrc;
    }
}

function updateCaptcha(captchaId) {
    $('#' + captchaId).attr("src", "Captcha?time=" + new Date());
}
/* FIN CAPTCHA*/
var cachedHiddenColumns = new Object();

function updateHiddenColumn(filtro) {
    var hidden = [];
    $("#" + filtro + " input:checkbox:not(:checked)").each(function() {
        // get col#
        hidden.push($(this).attr("name"));
    });
    cachedHiddenColumns[filtro] = hidden;
}

function hideColumns(filtro, tabla) {
    if (cachedHiddenColumns !== undefined && cachedHiddenColumns[filtro] !== undefined) {
        var array = cachedHiddenColumns[filtro];
        $("#" + filtro + " input:checkbox").each(function() {
            if (array.indexOf($(this).attr("name")) != -1) {
                $(this).removeAttr('checked');
            } else {
                $(this).attr('checked', true);
            }
        });
        cachedHiddenColumns[filtro] = undefined;
    }
    var internalId = "";
    if ($('table[id^="' + tabla + internalId + '_"]').length > 0 && ($('table[id^="' + tabla + internalId + '_"] .collection-table_noelements').length < 1)) {
        internalId = "_";
    }
    // get all non-checked inputs in filter
    $("#" + filtro + " input:checkbox:not(:checked)").each(function() {
        // get col#
        var col = parseInt($(this).attr("name").split("_check_")[1]) + 1;
        $('table[id^="' + tabla + internalId + '"]').each(function() {
            $(this).find('tbody').find('td:nth-child(' + col + ')').hide();
            $(this).find('thead').find('th:nth-child(' + col + ')').hide();
        });
    });
    $("#" + filtro + " input:checkbox").off('click');
    $("#" + filtro + " input:checkbox").click(function() {
        var col = parseInt($(this).attr("name").split("_check_")[1]) + 1;
        $('table[id^="' + tabla + internalId + '"]').each(function() {
            $(this).find('tbody').find('td:nth-child(' + col + ')').toggle();
            $(this).find('thead').find('th:nth-child(' + col + ')').toggle();
        });
    });
    $("#" + filtro).hide();
}

function showHideColumnFilter(elemento) {
    $("#" + elemento).toggle('slow');
    var label = $("#" + elemento + "_title").html();
    var newLabel = label.replace("&lt;&lt;", "&gt;&gt;");
    if (label === newLabel) newLabel = $("#" + elemento + "_title").html().replace("&gt;&gt;", "&lt;&lt;");
    $("#" + elemento + "_title").html(newLabel);
}

function validateMaxColumnFilter(elemento, maximoColumnas) {
    if (maximoColumnas > 0) {
        var checked = $("#" + elemento + " input:checkbox:checked").length;
        $("#" + elemento + " input:checkbox:not(:checked)").prop("disabled", checked >= maximoColumnas);
        $("#" + elemento + " input:checkbox:checked").prop("disabled", checked < 2);
    }
}

function setCookie(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + exdays * 1000);
    var expires = "expires=" + d.toGMTString();
    document.cookie = cname + "=" + cvalue + "; " + expires;
}

function getCookie(cname) {
    var name = cname + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i].trim();
        if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
    }
    return "";
}

function changeLanguage() {
    var cname = "view-language-cookie";
    var exdays = 604800;
    var lang = getCookie(cname);
    var newLang = $("#languageCombo").val();
    if (lang != newLang) {
        setCookie(cname, newLang, exdays);
    }
}
var divActual;

function dropDownDescription(nombreDiv, caller) {
    if (divActual == undefined) {
        $("#" + nombreDiv).slideDown("400", "swing");
        divActual = nombreDiv;
        var tdFlecha = caller.find("td[class$='_flecha']");
        var estiloFlecha = tdFlecha.attr('class');
        tdFlecha.removeClass(estiloFlecha);
        tdFlecha.addClass(estiloFlecha + "_close");
    } else if (divActual != nombreDiv) {
        $("#" + divActual).hide();
        $("#" + nombreDiv).slideDown("400", "swing");
        divActual = nombreDiv;
        var tdFlecha = caller.parent().find("td[class$='_flecha_close']").each(function(i) {
            var estiloFlecha = $(this).attr('class');
            $(this).removeClass(estiloFlecha);
            $(this).addClass(estiloFlecha.substring(0, estiloFlecha.lastIndexOf("_close")));
        });
        var tdFlecha = caller.find("td[class$='_flecha']");
        var estiloFlecha = tdFlecha.attr('class');
        tdFlecha.removeClass(estiloFlecha);
        tdFlecha.addClass(estiloFlecha + "_close");
    } else {
        document.getElementById(divActual).style.display = "none";
        divActual = undefined;
        var tdFlecha = caller.find("td[class$='_flecha_close']");
        var estiloFlecha = tdFlecha.attr('class');
        tdFlecha.removeClass(estiloFlecha);
        tdFlecha.addClass(estiloFlecha.substring(0, estiloFlecha.lastIndexOf("_close")));
    }
}

function collectionSelectAllRecords(button, id) {
    $(".checkboxCollection_" + id).prop('checked', $(button).prop("checked"));
}

function checkUncheckSelectAllButon(id) {
    if ($(".checkboxCollection_" + id).length == $(".checkboxCollection_" + id + ":checked").length) {
        $("#multiCheck_" + id).attr("checked", "checked");
    } else {
        $("#multiCheck_" + id).removeAttr("checked");
    }
}

function checkUncheckSelectAllButonOnLoad() {
    $("input[id^='multiCheck_']").each(function() {
        var multiCheck_id = $(this).attr('id');
        var coll_id = multiCheck_id.substring(multiCheck_id.indexOf("_") + 1, multiCheck_id.lenght);
        checkUncheckSelectAllButon(coll_id);
    });
}

function msieversion() {
    var ua = window.navigator.userAgent
    var msie = ua.indexOf("MSIE ")
    if (msie > 0) // If Internet Explorer, return version number
        return parseInt(ua.substring(msie + 5, ua.indexOf(".", msie)))
    else // If another browser, return 0
        return 0
}

function updateAllHiddenColumns() {
    $("div[id$='_columnFilter']").each(function() {
        updateHiddenColumn($(this).attr('id'));
    });
}

function hideAllColumns() {
    $("div[id$='_columnFilter']").each(function() {
        var filter = $(this).attr('id');
        var col2filter = filter.substring(0, filter.lastIndexOf('_columnFilter'));
        hideColumns(filter, col2filter);
    });
}

function validateAllMaxColumnFilter() {
    $("div[id$='_columnFilter']").each(function() {
        var filter = $(this).attr('id');
        validateMaxColumnFilter(filter, $('#' + filter + '_maxColumnFilter').val());
    });
}

function getInternetExplorerVersion() {
    var rv = -1; // Return value assumes failure.
    if (navigator.appName == 'Microsoft Internet Explorer') {
        var ua = navigator.userAgent;
        var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
        if (re.exec(ua) != null) rv = parseFloat(RegExp.$1);
    }
    return rv;
}
// Bloquear scroll cuando se abre una modal
function disableScroll() {
    $('body').css({
        overflow: "hidden"
    });
}

function enableScroll() {
    $('body').css({
        overflow: "auto"
    });
}
$('body').ready(function() {
    $('body').bind("DOMSubtreeModified", function() {
        if ($('#modalWindow').length) {
            disableScroll();
        } else {
            enableScroll();
        }
    })
});
//funcion auxiliar. por default está vacía, reimplementar en cyberbank-customized
function preProcessingSubmit() {
    return;
}

function downloadPdf(fileName) {
    var parameters = '';
    var formElement = '';
    formElement = document.getElementById('uuid');
    parameters += formElement.name + '=' + encodeURIParams(formElement.value) + '&';
    parameters += 'file=' + encodeURIParams(fileName);
    var downloadWindow = window.open('./downloadPdf?' + parameters, '_blank', 'fullscreen=yes');
}

function reloadLogin() {}

function dobleLisFileSearch(input, idPanel) {
    var text = document.getElementById(input).value.toLowerCase();
    var lisInicial = $('#' + idPanel).find('option');
    for (i = 0; i < lisInicial.length; i++) {
        if (!lisInicial[i].label.toLowerCase().includes(text) && text != "") {
            lisInicial[i].style.display = 'none';
        } else {
            lisInicial[i].style.display = '';
        }
    }
}

function isValidInvocation(actionID) {
    //control de validez de la invocacion
    if ("successLogin" == $('#loginForm > #seleccion').val()) {
        return false;
    }
    /*if($('#'+actionID).length>0){*/
    var lastExecutionId = actionID + executionUUID;
    var actualExecutionId = "";
    if ($('#main_form_modal').length > 0) {
        actualExecutionId = actionID + $('#main_form_modal > #uuid_ajax').val();
    } else {
        actualExecutionId = actionID + $('#main_form > #uuid_ajax').val();
    }
    if (lastExecutionId != actualExecutionId) {
        return false;
    }
    /*}else{
		return false;
	}*/
    return true;
}

function getLastLayoutAgainOnError() {
    window.status = traducir("Ejecutando...");
    if (procesando == false) {
        setProcesando(true);
        timerId = window.setTimeout('setProcesando(false)', 7000);
    } else {
        $.hideprogress();
        return;
    }
    $("#modalWindow").jqmHide();
    updateAllHiddenColumns();
    var uuid = $("input[name='uuid']").val();
    var parameters = "uuid=" + uuid;
    var dataToSend = "";
    if (CyberBank.encryption.enable) {
        var p_temp = getRandomPassword();
        parameters = JSON.stringify(createSecureRequest(parameters, p_temp));
        dataToSend = {
            parameters: parameters
        }
    } else {
        dataToSend = parameters;
    }
    $.ajaxInvoker({
        type: 'POST',
        url: 'index',
        data: dataToSend,
        headers: {
            'Content-type': 'application/x-www-form-urlencoded; charset=UTF8',
            'rebuildLayout': 'true',
            'Get-Form': 'true'
        },
        async: false
    }).done(function(data, textStatus, resp) {
        submitFormByAjax_DoneLogic(data, p_temp);
    }).fail(function(data, textStatus, resp) {
        submitFormByAjax_FailLogic(data, textStatus, resp, p_temp);
    }).always(function() {
        anularTimeout(timerId);
        $.hideprogress();
    });
}

function inIframe() {
    try {
        return window.self !== window.top;
    } catch (e) {
        return true;
    }
}

function mapReportToContext(url, reportId, isAsync) {
    formElement = document.getElementById('uuid');
    parameters = formElement.name + '=' + encodeURIParams(formElement.value) + "&" + "param1=" + reportId;
    mostrarEnEjecucion();
    var dataToSend = "";
    if (CyberBank.encryption.enable) {
        var p_temp = getRandomPassword();
        parameters = JSON.stringify(createSecureRequest(parameters, p_temp));
        dataToSend = {
            parameters: parameters
        }
    } else {
        dataToSend = parameters;
    }
    setTimeout(function() {
        $.ajaxInvoker({
            type: 'POST',
            url: url,
            data: dataToSend,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Get-Form': 'true'
            },
            async: (isAsync == undefined ? true : isAsync)
        }).done(function(data, textStatus, resp) {
            var respText = data;
            if (CyberBank.encryption.enable) {
                respText = resolveSecureResponse(data, p_temp);
            }
            try {
                data = $.parseJSON(respText);
            } catch (e) {
                console.log("Error de parseo al generar el reporte: " + reportId);
            }
            if (data.result == "success") {
                buttonName = data.actionButton;
                $("#" + buttonName).click();
            } else {
                console.log("Error al generar el reporte: " + reportId);
                buttonName = data.actionButton;
                $("#" + buttonName).click();
            }
        }).always(function() {
            anularTimeout(timerId);
            $.hideprogress();
        });
    }, 100)
}