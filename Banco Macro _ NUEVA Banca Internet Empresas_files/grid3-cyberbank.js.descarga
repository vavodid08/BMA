/**
 * 
 * Plug-in grid.tbltogrid.js: tableToGrid() method converts a HTML to Grid table
 * To emulate the single select, the beforeSelectRow option must return 'true'
 * @see http://jsfiddle.net/vandalo/YWVA8/4/
 *
 * @author hzerrizuela
 */

grid = {

	htmlTableToGrid: function(anId) {
		if ($("#" + anId).attr("isGrid") == 'true') {
			grid.singleConversion($("#" + anId));
		}
	},
	
	/**
	 * Converts all tables having the attribute isGrid to true
	 */
	htmlTablesToGrid: function() {
		$('table[isGrid="true"]').each(function(index) {
			grid.singleConversion($(this));
	    });
	   
	},
	
	singleConversion: function(aTable) {
			var valuesArray = new Array();
			var tid = aTable.attr('id');
			var pagerId = "#myPager_" + tid;
	 		var dep = aTable.attr('dependency');
	 		var isBigset = aTable.attr('bigset') == 'true';
	 		var isSortable = aTable.attr('sortable') == 'true';
			
			var opt = {  caption: aTable.attr('caption'),  
						 altRows: true, 
						 altclass:'old', 
						 autowidth: true, 
						 shrinkToFit: false,
						 pager: pagerId,
						 hidegrid: false,
						 //viewrecords: true,
					 	 //rownumbers: true, Works fine but setting this to true will break function 'isChecked' (cyberbank.js) since it
					 	 //relies of the checkboxes position in the table. 
					 	 rowNum: aTable.attr('registersPerPage'), 
					     rowTotal: aTable.attr('totalRecords'),
					     cmTemplate: {sortable: isSortable},
						 emptyrecords: 'No hay registros que mostrar.'
					 };
			
			//Sortable grids lose style information when sorting, so...
			if (!isSortable) {
				opt.gridComplete = function() {
					grid.removeCellGridSeparator($(grid.hashedGrid(tid)));
				} 
			}
			
			if (!isBigset) {
				if (aTable.attr('selectionMode') != 'none') {	
					opt.multiselect = true;
				}
	
				if (aTable.attr('selectionMode') == 'single') {
					opt.beforeSelectRow =  function(rowid, e) {
			        							jQuery(grid.hashed(tid)).jqGrid('resetSelection');
			        							return aTable.attr('selectionMode') == 'single';
			        					   }
				}
			} else {
				renderer.toBigset(opt, tid);
				//Perform conversion 						
		  		tableToGrid(grid.hashed(tid), opt);
				return;
			}
			
			//Only add the event if there's a dependency
			if (grid.hasDependency(dep)) {
				//Only if I have the subgrid already converted I can add the event safely...
				renderer.toGrid(aTable.attr('embedded') == 'true', opt, dep, tid);
			}	 
			
			
			//Save the values of the checkbox OR radio buttons for post-conversion use
			$(grid.hashed(tid) + " input:checkbox").each(function (i) {
				valuesArray[i] = $(this).val();
			});
			
			$(grid.hashed(tid)+ " input:radio").each(function (i) {
				valuesArray[i] = $(this).val();
			});
			
			//Perform conversion 						
		  	tableToGrid(grid.hashed(tid), opt);
			
			//Add [name,value] attributes to the checkboxes generated by the plugin, so it's still functional...
			for (var i=0, j=0; i < $(grid.hashedGrid(tid) + " input:checkbox").length; i++) {
				if (aTable.attr('selectionMode') == 'multi' && i == 0) { //First checkbox is the 'Select all' checkbox. Skip it. 
					continue;
				}
				if (aTable.attr('selectionMode') == 'single' && i == 0) {
					$($(grid.hashedGrid(tid) + " input:checkbox").get(i)).hide();
					continue;
				}
				
				$($(grid.hashedGrid(tid) + " input:checkbox").get(i)).attr("name", "encodedcollection_" + tid);
				$($(grid.hashedGrid(tid) + " input:checkbox").get(i)).attr("value", valuesArray[j]);
				j++;
			}
			
			//Add the pager buttons
		 	jQuery(grid.hashed(tid)).jqGrid('navGrid', pagerId ,{edit:false,add:false,del:false});
		 	var pagerDivId = "pg_myPager_" + tid; 
			$("div[id='" + pagerDivId + "'] td[dir='ltr'] input[type='text']").val(aTable.attr('pagenumber')).removeClass();
			$("#sp_1_myPager_" + tid).html(aTable.attr('maxPages'));

			
			//Bind pager buttons to events
			grid.manualBind(tid);	
			
			
	},
	
	
	hasDependency: function(dep) {
		return dep != undefined && dep.length > 0;
	},
	
	hashed: function(anId) {
		return "#" + anId;
	},
	
	hashedGrid: function(anId) {
		return "#gview_" + anId;
	},
	
	manualBind: function(t, j) {
		$("#next_myPager_" + t).bind('click', {tableId: t, aJump: 1}, function(event) {
			doPageJump(event.data.tableId, event.data.aJump);	
		});
		
		$("#last_myPager_" + t).bind('click', {tableId: t, aJump: 2}, function(event) {
			doPageJump(event.data.tableId, event.data.aJump);	
		});
		
		$("#prev_myPager_" + t).bind('click', {tableId: t, aJump: -1}, function(event) {
			doPageJump(event.data.tableId, event.data.aJump);	
		});
		
		$("#first_myPager_" + t).bind('click', {tableId: t, aJump: -2}, function(event) {
			doPageJump(event.data.tableId, event.data.aJump);	
		});
	},
	
    modifyGridImages: function(bb, b, f, ff, colID) {
    	if (bb) {
    		$("#first_myPager_" + colID).removeClass('ui-state-disabled');
    	} else {
    		$("#first_myPager_" + colID).addClass('ui-state-disabled');
    	}
    	
    	if (b) {
    		$("#prev_myPager_" + colID).removeClass('ui-state-disabled');	
    	} else {
    		$("#prev_myPager_" + colID).addClass('ui-state-disabled');
    	}
    	
    	if (f) {
    		$("#next_myPager_" + colID).removeClass('ui-state-disabled');
    	} else {
    		$("#next_myPager_" + colID).addClass('ui-state-disabled');
    	}
    	
    	if (ff) {
    		$("#last_myPager_" + colID).removeClass('ui-state-disabled');
    	} else {
    		$("#last_myPager_" + colID).addClass('ui-state-disabled');
    	}
	},
	
	/**
	 * Splits the value of the cell (the innerHTML from the class, using the "§" as separator)
	 */
	estilarCelda: function(rowId, val, rowObject, cm, rdata) {
		var myArray = val.split("§");
	
		rowObject[cm.name] = rowObject[cm.name].split("§")[0];
	
		return  " title='" + myArray[0] + "'" + 
				" class='" + myArray[1] + "'" ;
	},	

	/**
	 * Remove the "§" separator from the cells
	 */	
	removeCellGridSeparator: function(aGrid) {
		jQuery('tbody > tr > td', aGrid).each(function() {
			var anIndex = $(this).html().indexOf("§");
			if (anIndex != -1 ) {
				$(this).html($(this).html().substring(0, anIndex));
			}		
		});
	}
	
}

